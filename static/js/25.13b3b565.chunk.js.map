{"version":3,"file":"static/js/25.13b3b565.chunk.js","mappings":"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","sources":["../node_modules/pixi.js/src/scene/graphics/gl/GlGraphicsAdaptor.ts","../node_modules/pixi.js/src/scene/mesh/gl/GlMeshAdaptor.ts","../node_modules/pixi.js/src/rendering/batcher/gl/GlBatchAdaptor.ts","../node_modules/pixi.js/src/rendering/renderers/gl/buffer/const.ts","../node_modules/pixi.js/src/rendering/renderers/gl/buffer/GlBuffer.ts","../node_modules/pixi.js/src/rendering/renderers/gl/buffer/GlBufferSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gl/context/GlContextSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gl/texture/const.ts","../node_modules/pixi.js/src/rendering/renderers/gl/geometry/utils/getGlTypeFromFormat.ts","../node_modules/pixi.js/src/rendering/renderers/gl/geometry/GlGeometrySystem.ts","../node_modules/pixi.js/src/rendering/renderers/gl/GlBackBufferSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gl/GlColorMaskSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gl/GlEncoderSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gl/GlLimitsSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gl/GlStencilSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/utils/createUboElementsSTD40.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/utils/generateArraySyncSTD40.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/utils/createUboSyncSTD40.ts","../node_modules/pixi.js/src/rendering/renderers/gl/GlUboSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gl/GlRenderTarget.ts","../node_modules/pixi.js/src/rendering/renderers/gl/renderTarget/GlRenderTargetAdaptor.ts","../node_modules/pixi.js/src/rendering/renderers/gl/renderTarget/GlRenderTargetSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/GlProgramData.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/program/compileShader.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/program/defaultValue.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/program/mapType.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/program/logProgramError.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/program/generateProgram.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/program/extractAttributesFromGlProgram.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/program/getUniformData.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/program/getUboData.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/GlShaderSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/GenerateShaderSyncCode.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/utils/generateUniformsSyncTypes.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/GlUniformGroupSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/utils/generateUniformsSync.ts","../node_modules/pixi.js/src/rendering/renderers/gl/state/GlStateSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gl/state/mapWebGLBlendModesToPixi.ts","../node_modules/pixi.js/src/rendering/renderers/gl/texture/GlTexture.ts","../node_modules/pixi.js/src/rendering/renderers/gl/texture/uploaders/glUploadBufferImageResource.ts","../node_modules/pixi.js/src/rendering/renderers/gl/texture/uploaders/glUploadCompressedTextureResource.ts","../node_modules/pixi.js/src/rendering/renderers/gl/texture/uploaders/glUploadImageResource.ts","../node_modules/pixi.js/src/rendering/renderers/gl/texture/uploaders/glUploadVideoResource.ts","../node_modules/pixi.js/src/rendering/renderers/gl/texture/utils/pixiToGlMaps.ts","../node_modules/pixi.js/src/rendering/renderers/gl/texture/utils/applyStyleParams.ts","../node_modules/pixi.js/src/rendering/renderers/gl/texture/GlTextureSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gl/texture/utils/mapFormatToGlInternalFormat.ts","../node_modules/pixi.js/src/rendering/renderers/gl/texture/utils/mapFormatToGlType.ts","../node_modules/pixi.js/src/rendering/renderers/gl/texture/utils/mapFormatToGlFormat.ts","../node_modules/pixi.js/src/rendering/renderers/gl/WebGLRenderer.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { Matrix } from '../../../maths/matrix/Matrix';\nimport { compileHighShaderGlProgram } from '../../../rendering/high-shader/compileHighShaderToProgram';\nimport { colorBitGl } from '../../../rendering/high-shader/shader-bits/colorBit';\nimport { generateTextureBatchBitGl } from '../../../rendering/high-shader/shader-bits/generateTextureBatchBit';\nimport { localUniformBitGl } from '../../../rendering/high-shader/shader-bits/localUniformBit';\nimport { roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit';\nimport { getBatchSamplersUniformGroup } from '../../../rendering/renderers/gl/shader/getBatchSamplersUniformGroup';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { type Renderer } from '../../../rendering/renderers/types';\n\nimport type { Batch } from '../../../rendering/batcher/shared/Batcher';\nimport type { WebGLRenderer } from '../../../rendering/renderers/gl/WebGLRenderer';\nimport type { Graphics } from '../shared/Graphics';\nimport type { GraphicsAdaptor, GraphicsPipe } from '../shared/GraphicsPipe';\n\n/**\n * A GraphicsAdaptor that uses WebGL to render graphics.\n * @category rendering\n * @ignore\n */\nexport class GlGraphicsAdaptor implements GraphicsAdaptor\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipesAdaptor,\n        ],\n        name: 'graphics',\n    } as const;\n\n    public shader: Shader;\n\n    public contextChange(renderer: Renderer): void\n    {\n        const uniforms = new UniformGroup({\n            uColor: { value: new Float32Array([1, 1, 1, 1]), type: 'vec4<f32>' },\n            uTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uRound: { value: 0, type: 'f32' },\n        });\n\n        const maxTextures = renderer.limits.maxBatchableTextures;\n\n        const glProgram = compileHighShaderGlProgram({\n            name: 'graphics',\n            bits: [\n                colorBitGl,\n                generateTextureBatchBitGl(maxTextures),\n                localUniformBitGl,\n                roundPixelsBitGl,\n            ]\n        });\n\n        this.shader = new Shader({\n            glProgram,\n            resources: {\n                localUniforms: uniforms,\n                batchSamplers: getBatchSamplersUniformGroup(maxTextures),\n            }\n        });\n    }\n\n    public execute(graphicsPipe: GraphicsPipe, renderable: Graphics): void\n    {\n        const context = renderable.context;\n        const shader = context.customShader || this.shader;\n        const renderer = graphicsPipe.renderer as WebGLRenderer;\n        const contextSystem = renderer.graphicsContext;\n\n        const {\n            batcher, instructions,\n        } = contextSystem.getContextRenderData(context);\n\n        // WebGL specific..\n        shader.groups[0] = renderer.globalUniforms.bindGroup;\n\n        renderer.state.set(graphicsPipe.state);\n\n        renderer.shader.bind(shader);\n\n        renderer.geometry.bind(batcher.geometry, shader.glProgram);\n\n        const batches = instructions.instructions as Batch[];\n\n        for (let i = 0; i < instructions.instructionSize; i++)\n        {\n            const batch = batches[i];\n\n            if (batch.size)\n            {\n                for (let j = 0; j < batch.textures.count; j++)\n                {\n                    renderer.texture.bind(batch.textures.textures[j], j);\n                }\n\n                renderer.geometry.draw(batch.topology, batch.size, batch.start);\n            }\n        }\n    }\n\n    public destroy(): void\n    {\n        this.shader.destroy(true);\n        this.shader = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { Matrix } from '../../../maths/matrix/Matrix';\nimport { compileHighShaderGlProgram } from '../../../rendering/high-shader/compileHighShaderToProgram';\nimport { localUniformBitGl } from '../../../rendering/high-shader/shader-bits/localUniformBit';\nimport { roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit';\nimport { textureBitGl } from '../../../rendering/high-shader/shader-bits/textureBit';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport { warn } from '../../../utils/logging/warn';\n\nimport type { Mesh } from '../shared/Mesh';\nimport type { MeshAdaptor, MeshPipe } from '../shared/MeshPipe';\n\n/**\n * A MeshAdaptor that uses the WebGL to render meshes.\n * @category rendering\n * @ignore\n */\nexport class GlMeshAdaptor implements MeshAdaptor\n{\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipesAdaptor,\n        ],\n        name: 'mesh',\n    } as const;\n\n    private _shader: Shader;\n\n    public init(): void\n    {\n        const glProgram = compileHighShaderGlProgram({\n            name: 'mesh',\n            bits: [\n                localUniformBitGl,\n                textureBitGl,\n                roundPixelsBitGl,\n            ]\n        });\n\n        this._shader = new Shader({\n            glProgram,\n            resources: {\n                uTexture: Texture.EMPTY.source,\n                textureUniforms: {\n                    uTextureMatrix: { type: 'mat3x3<f32>', value: new Matrix() },\n                }\n            }\n        });\n    }\n\n    public execute(meshPipe: MeshPipe, mesh: Mesh): void\n    {\n        const renderer = meshPipe.renderer;\n\n        let shader: Shader = mesh._shader;\n\n        if (!shader)\n        {\n            shader = this._shader;\n\n            const texture = mesh.texture;\n            const source = texture.source;\n\n            shader.resources.uTexture = source;\n            shader.resources.uSampler = source.style;\n            shader.resources.textureUniforms.uniforms.uTextureMatrix = texture.textureMatrix.mapCoord;\n        }\n        else if (!shader.glProgram)\n        {\n            // #if _DEBUG\n            warn('Mesh shader has no glProgram', mesh.shader);\n            // #endif\n\n            return;\n        }\n\n        // setting the groups to be high to be compatible and not\n        // overlap any other groups\n        shader.groups[100] = renderer.globalUniforms.bindGroup;\n        shader.groups[101] = meshPipe.localUniformsBindGroup;\n\n        renderer.encoder.draw({\n            geometry: mesh._geometry,\n            shader,\n            state: mesh.state,\n        });\n    }\n\n    public destroy(): void\n    {\n        this._shader.destroy(true);\n        this._shader = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { State } from '../../renderers/shared/state/State';\n\nimport type { WebGLRenderer } from '../../renderers/gl/WebGLRenderer';\nimport type { Geometry } from '../../renderers/shared/geometry/Geometry';\nimport type { Shader } from '../../renderers/shared/shader/Shader';\nimport type { Batch } from '../shared/Batcher';\nimport type { BatcherAdaptor, BatcherPipe } from '../shared/BatcherPipe';\n\n/**\n * A BatcherAdaptor that uses WebGL to render batches.\n * @category rendering\n * @ignore\n */\nexport class GlBatchAdaptor implements BatcherAdaptor\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipesAdaptor,\n        ],\n        name: 'batch',\n    } as const;\n\n    private readonly _tempState = State.for2d();\n\n    /**\n     * We only want to sync the a batched shaders uniforms once on first use\n     * this is a hash of shader uids to a boolean value.  When the shader is first bound\n     * we set the value to true.  When the shader is bound again we check the value and\n     * if it is true we know that the uniforms have already been synced and we skip it.\n     */\n    private _didUploadHash: Record<string, boolean> = {};\n    public init(batcherPipe: BatcherPipe): void\n    {\n        batcherPipe.renderer.runners.contextChange.add(this);\n    }\n\n    public contextChange(): void\n    {\n        this._didUploadHash = {};\n    }\n\n    public start(batchPipe: BatcherPipe, geometry: Geometry, shader: Shader): void\n    {\n        const renderer = batchPipe.renderer as WebGLRenderer;\n\n        const didUpload = this._didUploadHash[shader.uid];\n\n        // only want to sync the shade ron its first bind!\n        renderer.shader.bind(shader, didUpload);\n\n        if (!didUpload)\n        {\n            this._didUploadHash[shader.uid] = true;\n        }\n\n        renderer.shader.updateUniformGroup(renderer.globalUniforms.uniformGroup);\n\n        renderer.geometry.bind(geometry, shader.glProgram);\n    }\n\n    public execute(batchPipe: BatcherPipe, batch: Batch): void\n    {\n        const renderer = batchPipe.renderer as WebGLRenderer;\n\n        this._tempState.blendMode = batch.blendMode;\n\n        renderer.state.set(this._tempState);\n\n        const textures = batch.textures.textures;\n\n        for (let i = 0; i < batch.textures.count; i++)\n        {\n            renderer.texture.bind(textures[i], i);\n        }\n\n        renderer.geometry.draw(batch.topology, batch.size, batch.start);\n    }\n}\n","/**\n * Constants for various buffer types in Pixi\n * @category rendering\n * @advanced\n */\nexport enum BUFFER_TYPE\n{\n    /** buffer type for using as an index buffer */\n    ELEMENT_ARRAY_BUFFER = 34963,\n    /** buffer type for using attribute data */\n    ARRAY_BUFFER = 34962,\n    /** the buffer type is for uniform buffer objects */\n    UNIFORM_BUFFER = 35345,\n}\n\n","import type { BUFFER_TYPE } from './const';\n\n/** @internal */\nexport class GlBuffer\n{\n    public buffer: WebGLBuffer;\n    public updateID: number;\n    public byteLength: number;\n    public type: number;\n\n    public _lastBindBaseLocation: number = -1;\n    public _lastBindCallId: number = -1;\n\n    constructor(buffer: WebGLBuffer, type: BUFFER_TYPE)\n    {\n        this.buffer = buffer || null;\n        this.updateID = -1;\n        this.byteLength = -1;\n        this.type = type;\n    }\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { BufferUsage } from '../../shared/buffer/const';\nimport { BUFFER_TYPE } from './const';\nimport { GlBuffer } from './GlBuffer';\n\nimport type { Buffer } from '../../shared/buffer/Buffer';\nimport type { System } from '../../shared/system/System';\nimport type { GlRenderingContext } from '../context/GlRenderingContext';\nimport type { WebGLRenderer } from '../WebGLRenderer';\n\n/**\n * System plugin to the renderer to manage buffers.\n *\n * WebGL uses Buffers as a way to store objects to the GPU.\n * This system makes working with them a lot easier.\n *\n * Buffers are used in three main places in WebGL\n * - geometry information\n * - Uniform information (via uniform buffer objects - a WebGL 2 only feature)\n * - Transform feedback information. (WebGL 2 only feature)\n *\n * This system will handle the binding of buffers to the GPU as well as uploading\n * them. With this system, you never need to work directly with GPU buffers, but instead work with\n * the Buffer class.\n * @class\n * @category rendering\n * @advanced\n */\nexport class GlBufferSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'buffer',\n    } as const;\n\n    private _gl: GlRenderingContext;\n    private _gpuBuffers: {[key: number]: GlBuffer} = Object.create(null);\n\n    /** Cache keeping track of the base bound buffer bases */\n    private _boundBufferBases: {[key: number]: GlBuffer} = Object.create(null);\n\n    private _renderer: WebGLRenderer;\n\n    private _minBaseLocation = 0;\n    private _maxBindings: number;\n    private _nextBindBaseIndex = this._minBaseLocation;\n    private _bindCallId = 0;\n\n    /**\n     * @param {Renderer} renderer - The renderer this System works for.\n     */\n    constructor(renderer: WebGLRenderer)\n    {\n        this._renderer = renderer;\n\n        this._renderer.renderableGC.addManagedHash(this, '_gpuBuffers');\n    }\n\n    /** @ignore */\n    public destroy(): void\n    {\n        this._renderer = null;\n        this._gl = null;\n        this._gpuBuffers = null;\n        (this._boundBufferBases as null) = null;\n    }\n\n    /** Sets up the renderer context and necessary buffers. */\n    protected contextChange(): void\n    {\n        this._gl = this._renderer.gl;\n\n        this._gpuBuffers = Object.create(null);\n        this._maxBindings = this._renderer.limits.maxUniformBindings;\n    }\n\n    public getGlBuffer(buffer: Buffer): GlBuffer\n    {\n        return this._gpuBuffers[buffer.uid] || this.createGLBuffer(buffer);\n    }\n\n    /**\n     * This binds specified buffer. On first run, it will create the webGL buffers for the context too\n     * @param buffer - the buffer to bind to the renderer\n     */\n    public bind(buffer: Buffer): void\n    {\n        const { _gl: gl } = this;\n\n        const glBuffer = this.getGlBuffer(buffer);\n\n        gl.bindBuffer(glBuffer.type, glBuffer.buffer);\n    }\n\n    /**\n     * Binds an uniform buffer to at the given index.\n     *\n     * A cache is used so a buffer will not be bound again if already bound.\n     * @param glBuffer - the buffer to bind\n     * @param index - the base index to bind it to.\n     */\n    public bindBufferBase(glBuffer: GlBuffer, index: number): void\n    {\n        const { _gl: gl } = this;\n\n        if (this._boundBufferBases[index] !== glBuffer)\n        {\n            this._boundBufferBases[index] = glBuffer;\n            glBuffer._lastBindBaseLocation = index;\n\n            gl.bindBufferBase(gl.UNIFORM_BUFFER, index, glBuffer.buffer);\n        }\n    }\n\n    public nextBindBase(hasTransformFeedback: boolean)\n    {\n        this._bindCallId++;\n        this._minBaseLocation = 0;\n        if (hasTransformFeedback)\n        {\n            this._boundBufferBases[0] = null;\n            this._minBaseLocation = 1;\n            if (this._nextBindBaseIndex < 1)\n            {\n                this._nextBindBaseIndex = 1;\n            }\n        }\n    }\n\n    public freeLocationForBufferBase(glBuffer: GlBuffer): number\n    {\n        let freeIndex = this.getLastBindBaseLocation(glBuffer);\n\n        // check if it is already bound..\n        if (freeIndex >= this._minBaseLocation)\n        {\n            glBuffer._lastBindCallId = this._bindCallId;\n\n            return freeIndex;\n        }\n\n        let loop = 0;\n        let nextIndex = this._nextBindBaseIndex;\n\n        while (loop < 2)\n        {\n            if (nextIndex >= this._maxBindings)\n            {\n                nextIndex = this._minBaseLocation;\n                loop++;\n            }\n\n            const curBuf = this._boundBufferBases[nextIndex];\n\n            if (curBuf && curBuf._lastBindCallId === this._bindCallId)\n            {\n                nextIndex++;\n                continue;\n            }\n            break;\n        }\n\n        freeIndex = nextIndex;\n        this._nextBindBaseIndex = nextIndex + 1;\n\n        if (loop >= 2)\n        {\n            // TODO: error\n            return -1;\n        }\n\n        glBuffer._lastBindCallId = this._bindCallId;\n        this._boundBufferBases[freeIndex] = null;\n\n        return freeIndex;\n    }\n\n    public getLastBindBaseLocation(glBuffer: GlBuffer): number\n    {\n        const index = glBuffer._lastBindBaseLocation;\n\n        if (this._boundBufferBases[index] === glBuffer)\n        {\n            return index;\n        }\n\n        return -1;\n    }\n\n    /**\n     * Binds a buffer whilst also binding its range.\n     * This will make the buffer start from the offset supplied rather than 0 when it is read.\n     * @param glBuffer - the buffer to bind\n     * @param index - the base index to bind at, defaults to 0\n     * @param offset - the offset to bind at (this is blocks of 256). 0 = 0, 1 = 256, 2 = 512 etc\n     * @param size - the size to bind at (this is blocks of 256).\n     */\n    public bindBufferRange(glBuffer: GlBuffer, index?: number, offset?: number, size?: number): void\n    {\n        const { _gl: gl } = this;\n\n        offset ||= 0;\n        index ||= 0;\n\n        this._boundBufferBases[index] = null;\n\n        gl.bindBufferRange(gl.UNIFORM_BUFFER, index || 0, glBuffer.buffer, offset * 256, size || 256);\n    }\n\n    /**\n     * Will ensure the data in the buffer is uploaded to the GPU.\n     * @param {Buffer} buffer - the buffer to update\n     */\n    public updateBuffer(buffer: Buffer): GlBuffer\n    {\n        const { _gl: gl } = this;\n\n        const glBuffer = this.getGlBuffer(buffer);\n\n        if (buffer._updateID === glBuffer.updateID)\n        {\n            return glBuffer;\n        }\n\n        glBuffer.updateID = buffer._updateID;\n\n        gl.bindBuffer(glBuffer.type, glBuffer.buffer);\n\n        const data = buffer.data;\n\n        const drawType = (buffer.descriptor.usage & BufferUsage.STATIC) ? gl.STATIC_DRAW : gl.DYNAMIC_DRAW;\n\n        if (data)\n        {\n            if (glBuffer.byteLength >= data.byteLength)\n            {\n                // assuming our buffers are aligned to 4 bits...\n                // offset is always zero for now!\n                gl.bufferSubData(glBuffer.type, 0, data, 0, buffer._updateSize / data.BYTES_PER_ELEMENT);\n            }\n            else\n            {\n                glBuffer.byteLength = data.byteLength;\n                // assuming our buffers are aligned to 4 bits...\n                gl.bufferData(glBuffer.type, data, drawType);\n            }\n        }\n        else\n        {\n            glBuffer.byteLength = buffer.descriptor.size;\n            gl.bufferData(glBuffer.type, glBuffer.byteLength, drawType);\n        }\n\n        return glBuffer;\n    }\n\n    /** dispose all WebGL resources of all managed buffers */\n    public destroyAll(): void\n    {\n        const gl = this._gl;\n\n        for (const id in this._gpuBuffers)\n        {\n            gl.deleteBuffer(this._gpuBuffers[id].buffer);\n        }\n\n        this._gpuBuffers = Object.create(null);\n    }\n\n    /**\n     * Disposes buffer\n     * @param {Buffer} buffer - buffer with data\n     * @param {boolean} [contextLost=false] - If context was lost, we suppress deleteVertexArray\n     */\n    protected onBufferDestroy(buffer: Buffer, contextLost?: boolean): void\n    {\n        const glBuffer = this._gpuBuffers[buffer.uid];\n\n        const gl = this._gl;\n\n        if (!contextLost)\n        {\n            gl.deleteBuffer(glBuffer.buffer);\n        }\n\n        this._gpuBuffers[buffer.uid] = null;\n    }\n\n    /**\n     * creates and attaches a GLBuffer object tied to the current context.\n     * @param buffer\n     * @protected\n     */\n    protected createGLBuffer(buffer: Buffer): GlBuffer\n    {\n        const { _gl: gl } = this;\n\n        let type = BUFFER_TYPE.ARRAY_BUFFER;\n\n        if ((buffer.descriptor.usage & BufferUsage.INDEX))\n        {\n            type = BUFFER_TYPE.ELEMENT_ARRAY_BUFFER;\n        }\n        else if ((buffer.descriptor.usage & BufferUsage.UNIFORM))\n        {\n            type = BUFFER_TYPE.UNIFORM_BUFFER;\n        }\n\n        const glBuffer = new GlBuffer(gl.createBuffer(), type);\n\n        this._gpuBuffers[buffer.uid] = glBuffer;\n\n        buffer.on('destroy', this.onBufferDestroy, this);\n\n        return glBuffer;\n    }\n\n    public resetState(): void\n    {\n        this._boundBufferBases = Object.create(null);\n    }\n}\n","import { DOMAdapter } from '../../../../environment/adapter';\nimport { ExtensionType } from '../../../../extensions/Extensions';\nimport { warn } from '../../../../utils/logging/warn';\nimport { type GpuPowerPreference } from '../../types';\n\nimport type { ICanvas } from '../../../../environment/canvas/ICanvas';\nimport type { System } from '../../shared/system/System';\nimport type { WebGLRenderer } from '../WebGLRenderer';\nimport type { WebGLExtensions } from './WebGLExtensions';\n\n/**\n * Options for the context system.\n * @category rendering\n * @advanced\n * @property {WebGL2RenderingContext | null} [context=null] - User-provided WebGL rendering context object.\n * @property {GpuPowerPreference} [powerPreference='default'] - An optional hint indicating what configuration\n * of GPU is suitable for the WebGL context, can be `'high-performance'` or `'low-power'`. Setting to `'high-performance'`\n * will prioritize rendering performance over power consumption, while setting to `'low-power'` will prioritize power saving\n * over rendering performance.\n * @property {boolean} [premultipliedAlpha=true] - Whether the compositor will assume the drawing buffer contains\n * colors with premultiplied alpha.\n * @property {boolean} [preserveDrawingBuffer=false] - Whether to enable drawing buffer preservation.\n * If enabled, the drawing buffer will preserve\n * its value until cleared or overwritten. Enable this if you need to call `toDataUrl` on the WebGL context.\n * @property {boolean} [antialias] - Whether to enable antialiasing.\n * @property {1 | 2} [preferWebGLVersion=2] - The preferred WebGL version to use.\n */\nexport interface ContextSystemOptions\n{\n    /**\n     * User-provided WebGL rendering context object.\n     * @default null\n     */\n    context: WebGL2RenderingContext | null;\n    /**\n     * An optional hint indicating what configuration of GPU is suitable for the WebGL context,\n     * can be `'high-performance'` or `'low-power'`.\n     * Setting to `'high-performance'` will prioritize rendering performance over power consumption,\n     * while setting to `'low-power'` will prioritize power saving over rendering performance.\n     * @default undefined\n     */\n    powerPreference?: GpuPowerPreference;\n\n    /**\n     * Whether the compositor will assume the drawing buffer contains colors with premultiplied alpha.\n     * @default true\n     */\n    premultipliedAlpha: boolean;\n    /**\n     * Whether to enable drawing buffer preservation. If enabled, the drawing buffer will preserve\n     * its value until cleared or overwritten. Enable this if you need to call `toDataUrl` on the WebGL context.\n     * @default false\n     */\n    preserveDrawingBuffer: boolean;\n\n    antialias?: boolean;\n\n    /**\n     * The preferred WebGL version to use.\n     * @default 2\n     */\n    preferWebGLVersion?: 1 | 2;\n\n    /**\n     * Whether to enable multi-view rendering. Set to true when rendering to multiple\n     * canvases on the dom.\n     * @default false\n     */\n    multiView: boolean;\n}\n\n/**\n * System plugin to the renderer to manage the context\n * @category rendering\n * @advanced\n */\nexport class GlContextSystem implements System<ContextSystemOptions>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'context',\n    } as const;\n\n    /** The default options for the system. */\n    public static defaultOptions: ContextSystemOptions = {\n        /**\n         * {@link WebGLOptions.context}\n         * @default null\n         */\n        context: null,\n        /**\n         * {@link WebGLOptions.premultipliedAlpha}\n         * @default true\n         */\n        premultipliedAlpha: true,\n        /**\n         * {@link WebGLOptions.preserveDrawingBuffer}\n         * @default false\n         */\n        preserveDrawingBuffer: false,\n        /**\n         * {@link WebGLOptions.powerPreference}\n         * @default default\n         */\n        powerPreference: undefined,\n        /**\n         * {@link WebGLOptions.webGLVersion}\n         * @default 2\n         */\n        preferWebGLVersion: 2,\n        /**\n         * {@link WebGLOptions.multiView}\n         * @default false\n         */\n        multiView: false\n    };\n\n    protected CONTEXT_UID: number;\n    protected gl: WebGL2RenderingContext;\n\n    /**\n     * Features supported by current renderer.\n     * @type {object}\n     * @readonly\n     */\n    public supports = {\n        /** Support for 32-bit indices buffer. */\n        uint32Indices: true,\n        /** Support for UniformBufferObjects */\n        uniformBufferObject: true,\n        /** Support for VertexArrayObjects */\n        vertexArrayObject: true,\n        /** Support for SRGB texture format */\n        srgbTextures: true,\n        /** Support for wrapping modes if a texture is non-power of two */\n        nonPowOf2wrapping: true,\n        /** Support for MSAA (antialiasing of dynamic textures) */\n        msaa: true,\n        /** Support for mipmaps if a texture is non-power of two */\n        nonPowOf2mipmaps: true,\n    };\n\n    /**\n     * Extensions available.\n     * @type {object}\n     * @readonly\n     * @property {WEBGL_draw_buffers} drawBuffers - WebGL v1 extension\n     * @property {WEBGL_depth_texture} depthTexture - WebGL v1 extension\n     * @property {OES_texture_float} floatTexture - WebGL v1 extension\n     * @property {WEBGL_lose_context} loseContext - WebGL v1 extension\n     * @property {OES_vertex_array_object} vertexArrayObject - WebGL v1 extension\n     * @property {EXT_texture_filter_anisotropic} anisotropicFiltering - WebGL v1 and v2 extension\n     */\n    public extensions: WebGLExtensions;\n\n    public webGLVersion: 1 | 2;\n\n    /**\n     * Whether to enable multi-view rendering. Set to true when rendering to multiple\n     * canvases on the dom.\n     * @default false\n     */\n    public multiView: boolean;\n\n    /**\n     * The canvas that the WebGL Context is rendering to.\n     * This will be the view canvas. But if multiView is enabled, this canvas will not be attached to the DOM.\n     * It will be rendered to and then copied to the target canvas.\n     * @readonly\n     */\n    public canvas: ICanvas;\n\n    private _renderer: WebGLRenderer;\n    private _contextLossForced: boolean;\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: WebGLRenderer)\n    {\n        this._renderer = renderer;\n\n        this.extensions = Object.create(null);\n\n        // Bind functions\n        this.handleContextLost = this.handleContextLost.bind(this);\n        this.handleContextRestored = this.handleContextRestored.bind(this);\n    }\n\n    /**\n     * `true` if the context is lost\n     * @readonly\n     */\n    get isLost(): boolean\n    {\n        return (!this.gl || this.gl.isContextLost());\n    }\n\n    /**\n     * Handles the context change event.\n     * @param {WebGLRenderingContext} gl - New WebGL context.\n     */\n    protected contextChange(gl: WebGL2RenderingContext): void\n    {\n        this.gl = gl;\n        this._renderer.gl = gl;\n    }\n\n    public init(options: ContextSystemOptions): void\n    {\n        options = { ...GlContextSystem.defaultOptions, ...options };\n\n        // TODO add to options\n        let multiView = this.multiView = options.multiView;\n\n        if (options.context && multiView)\n        {\n            // eslint-disable-next-line max-len\n            warn('Renderer created with both a context and multiview enabled. Disabling multiView as both cannot work together.');\n\n            multiView = false;\n        }\n\n        if (multiView)\n        {\n            this.canvas = DOMAdapter.get()\n                .createCanvas(this._renderer.canvas.width, this._renderer.canvas.height);\n        }\n        else\n        {\n            this.canvas = this._renderer.view.canvas;\n        }\n        /*\n         * The options passed in to create a new WebGL context.\n         */\n        if (options.context)\n        {\n            this.initFromContext(options.context);\n        }\n        else\n        {\n            const alpha = this._renderer.background.alpha < 1;\n            const premultipliedAlpha = options.premultipliedAlpha ?? true;\n            const antialias = options.antialias && !this._renderer.backBuffer.useBackBuffer;\n\n            this.createContext(options.preferWebGLVersion, {\n                alpha,\n                premultipliedAlpha,\n                antialias,\n                stencil: true,\n                preserveDrawingBuffer: options.preserveDrawingBuffer,\n                powerPreference: options.powerPreference ?? 'default',\n            });\n        }\n    }\n\n    public ensureCanvasSize(targetCanvas: ICanvas): void\n    {\n        if (!this.multiView)\n        {\n            if (targetCanvas !== this.canvas)\n            {\n                warn('multiView is disabled, but targetCanvas is not the main canvas');\n            }\n\n            return;\n        }\n\n        const { canvas } = this;\n\n        if (canvas.width < targetCanvas.width || canvas.height < targetCanvas.height)\n        {\n            canvas.width = Math.max(targetCanvas.width, targetCanvas.width);\n            canvas.height = Math.max(targetCanvas.height, targetCanvas.height);\n        }\n    }\n\n    /**\n     * Initializes the context.\n     * @protected\n     * @param {WebGLRenderingContext} gl - WebGL context\n     */\n    protected initFromContext(gl: WebGL2RenderingContext): void\n    {\n        this.gl = gl;\n\n        this.webGLVersion = gl instanceof DOMAdapter.get().getWebGLRenderingContext() ? 1 : 2;\n\n        this.getExtensions();\n\n        this.validateContext(gl);\n\n        this._renderer.runners.contextChange.emit(gl);\n\n        const element = this._renderer.view.canvas;\n\n        (element as any).addEventListener('webglcontextlost', this.handleContextLost, false);\n        element.addEventListener('webglcontextrestored', this.handleContextRestored, false);\n    }\n\n    /**\n     * Initialize from context options\n     * @protected\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext\n     * @param preferWebGLVersion\n     * @param {object} options - context attributes\n     */\n    protected createContext(preferWebGLVersion: 1 | 2, options: WebGLContextAttributes): void\n    {\n        let gl: WebGL2RenderingContext | WebGLRenderingContext;\n\n        const canvas = this.canvas;\n\n        if (preferWebGLVersion === 2)\n        {\n            gl = canvas.getContext('webgl2', options);\n        }\n\n        if (!gl)\n        {\n            gl = canvas.getContext('webgl', options);\n\n            if (!gl)\n            {\n                // fail, not able to get a context\n                throw new Error('This browser does not support WebGL. Try using the canvas renderer');\n            }\n        }\n\n        this.gl = gl as WebGL2RenderingContext;\n\n        this.initFromContext(this.gl);\n    }\n\n    /** Auto-populate the {@link GlContextSystem.extensions extensions}. */\n    protected getExtensions(): void\n    {\n        // time to set up default extensions that Pixi uses.\n        const { gl } = this;\n\n        const common = {\n            anisotropicFiltering: gl.getExtension('EXT_texture_filter_anisotropic'),\n            floatTextureLinear: gl.getExtension('OES_texture_float_linear'),\n\n            s3tc: gl.getExtension('WEBGL_compressed_texture_s3tc'),\n            s3tc_sRGB: gl.getExtension('WEBGL_compressed_texture_s3tc_srgb'), // eslint-disable-line camelcase\n            etc: gl.getExtension('WEBGL_compressed_texture_etc'),\n            etc1: gl.getExtension('WEBGL_compressed_texture_etc1'),\n            pvrtc: gl.getExtension('WEBGL_compressed_texture_pvrtc')\n                || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc'),\n            atc: gl.getExtension('WEBGL_compressed_texture_atc'),\n            astc: gl.getExtension('WEBGL_compressed_texture_astc'),\n            bptc: gl.getExtension('EXT_texture_compression_bptc'),\n            rgtc: gl.getExtension('EXT_texture_compression_rgtc'),\n            loseContext: gl.getExtension('WEBGL_lose_context'),\n        };\n\n        if (this.webGLVersion === 1)\n        {\n            this.extensions = {\n                ...common,\n\n                drawBuffers: gl.getExtension('WEBGL_draw_buffers'),\n                depthTexture: gl.getExtension('WEBGL_depth_texture'),\n                vertexArrayObject: gl.getExtension('OES_vertex_array_object')\n                    || gl.getExtension('MOZ_OES_vertex_array_object')\n                    || gl.getExtension('WEBKIT_OES_vertex_array_object'),\n                uint32ElementIndex: gl.getExtension('OES_element_index_uint'),\n                // Floats and half-floats\n                floatTexture: gl.getExtension('OES_texture_float'),\n                floatTextureLinear: gl.getExtension('OES_texture_float_linear'),\n                textureHalfFloat: gl.getExtension('OES_texture_half_float'),\n                textureHalfFloatLinear: gl.getExtension('OES_texture_half_float_linear'),\n                vertexAttribDivisorANGLE: gl.getExtension('ANGLE_instanced_arrays'),\n                srgb: gl.getExtension('EXT_sRGB'),\n            };\n        }\n        else\n        {\n            this.extensions = {\n                ...common,\n                colorBufferFloat: gl.getExtension('EXT_color_buffer_float'),\n            };\n\n            const provokeExt = gl.getExtension('WEBGL_provoking_vertex');\n\n            if (provokeExt)\n            {\n                provokeExt.provokingVertexWEBGL(provokeExt.FIRST_VERTEX_CONVENTION_WEBGL);\n            }\n        }\n    }\n\n    /**\n     * Handles a lost webgl context\n     * @param {WebGLContextEvent} event - The context lost event.\n     */\n    protected handleContextLost(event: WebGLContextEvent): void\n    {\n        event.preventDefault();\n\n        // only restore if we purposefully nuked it\n        if (this._contextLossForced)\n        {\n            this._contextLossForced = false;\n            // Restore the context after this event has exited\n            setTimeout(() =>\n            {\n                if (this.gl.isContextLost())\n                {\n                    this.extensions.loseContext?.restoreContext();\n                }\n            }, 0);\n        }\n    }\n\n    /** Handles a restored webgl context. */\n    protected handleContextRestored(): void\n    {\n        this.getExtensions(); // restore extensions state\n        this._renderer.runners.contextChange.emit(this.gl);\n    }\n\n    public destroy(): void\n    {\n        const element = this._renderer.view.canvas;\n\n        this._renderer = null;\n\n        // remove listeners\n        (element as any).removeEventListener('webglcontextlost', this.handleContextLost);\n        element.removeEventListener('webglcontextrestored', this.handleContextRestored);\n\n        this.gl.useProgram(null);\n\n        this.extensions.loseContext?.loseContext();\n    }\n\n    /**\n     * this function can be called to force a webGL context loss\n     * this will release all resources on the GPU.\n     * Useful if you need to put Pixi to sleep, and save some GPU memory\n     *\n     * As soon as render is called - all resources will be created again.\n     */\n    public forceContextLoss(): void\n    {\n        this.extensions.loseContext?.loseContext();\n        this._contextLossForced = true;\n    }\n    /**\n     * Validate context.\n     * @param {WebGLRenderingContext} gl - Render context.\n     */\n    protected validateContext(gl: WebGL2RenderingContext): void\n    {\n        const attributes = gl.getContextAttributes();\n\n        // this is going to be fairly simple for now.. but at least we have room to grow!\n        if (attributes && !attributes.stencil)\n        {\n            // #if _DEBUG\n            warn('Provided WebGL context does not have a stencil buffer, masks may not render correctly');\n            // #endif\n        }\n\n        // support\n        const supports = this.supports;\n\n        const isWebGl2 = this.webGLVersion === 2;\n        const extensions = this.extensions;\n\n        supports.uint32Indices = isWebGl2 || !!extensions.uint32ElementIndex;\n        supports.uniformBufferObject = isWebGl2;\n        supports.vertexArrayObject = isWebGl2 || !!extensions.vertexArrayObject;\n        supports.srgbTextures = isWebGl2 || !!extensions.srgb;\n        supports.nonPowOf2wrapping = isWebGl2;\n        supports.nonPowOf2mipmaps = isWebGl2;\n        supports.msaa = isWebGl2;\n\n        if (!supports.uint32Indices)\n        {\n            // #if _DEBUG\n            warn('Provided WebGL context does not support 32 index buffer, large scenes may not render correctly');\n            // #endif\n        }\n    }\n}\n","/**\n * Various GL texture/resources formats.\n * @category rendering\n * @advanced\n */\nexport enum GL_FORMATS\n{\n    RGBA = 6408,\n    RGB = 6407,\n    RG = 33319,\n    RED = 6403,\n    RGBA_INTEGER = 36249,\n    RGB_INTEGER = 36248,\n    RG_INTEGER = 33320,\n    RED_INTEGER = 36244,\n    ALPHA = 6406,\n    LUMINANCE = 6409,\n    LUMINANCE_ALPHA = 6410,\n    DEPTH_COMPONENT = 6402,\n    DEPTH_STENCIL = 34041,\n}\n\n/**\n * Various GL target types.\n * @category rendering\n * @advanced\n */\nexport enum GL_TARGETS\n{\n    TEXTURE_2D = 3553,\n    TEXTURE_CUBE_MAP = 34067,\n    TEXTURE_2D_ARRAY = 35866,\n    TEXTURE_CUBE_MAP_POSITIVE_X = 34069,\n    TEXTURE_CUBE_MAP_NEGATIVE_X = 34070,\n    TEXTURE_CUBE_MAP_POSITIVE_Y = 34071,\n    TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072,\n    TEXTURE_CUBE_MAP_POSITIVE_Z = 34073,\n    TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074,\n}\n\n/**\n * The wrap modes that are supported by pixi.\n *\n * The {@link WRAP_MODE} wrap mode affects the default wrapping mode of future operations.\n * It can be re-assigned to either CLAMP or REPEAT, depending upon suitability.\n * If the texture is non power of two then clamp will be used regardless as WebGL can\n * only use REPEAT if the texture is po2.\n *\n * This property only affects WebGL.\n * @category rendering\n * @advanced\n */\nexport enum GL_WRAP_MODES\n{\n    /**\n     * The textures uvs are clamped\n     * @default 33071\n     */\n    CLAMP = 33071,\n    /**\n     * The texture uvs tile and repeat\n     * @default 10497\n     */\n    REPEAT = 10497,\n    /**\n     * The texture uvs tile and repeat with mirroring\n     * @default 33648\n     */\n    MIRRORED_REPEAT = 33648,\n}\n\n/** @internal */\nexport enum GL_TYPES\n{\n    /**\n     * 8 bits per channel for gl.RGBA\n     * @default 5121\n     */\n    UNSIGNED_BYTE = 5121,\n    /** @default 5123 */\n    UNSIGNED_SHORT = 5123,\n    /**\n     * 5 red bits, 6 green bits, 5 blue bits.\n     * @default 33635\n     */\n    UNSIGNED_SHORT_5_6_5 = 33635,\n    /**\n     * 4 red bits, 4 green bits, 4 blue bits, 4 alpha bits.\n     * @default 32819\n     */\n    UNSIGNED_SHORT_4_4_4_4 = 32819,\n    /**\n     * 5 red bits, 5 green bits, 5 blue bits, 1 alpha bit.\n     * @default 32820\n     */\n    UNSIGNED_SHORT_5_5_5_1 = 32820,\n    /** @default 5125 */\n    UNSIGNED_INT = 5125,\n    /** @default 35899 */\n    UNSIGNED_INT_10F_11F_11F_REV = 35899,\n    /** @default 33640 */\n    UNSIGNED_INT_2_10_10_10_REV = 33640,\n    /** @default 34042 */\n    UNSIGNED_INT_24_8 = 34042,\n    /** @default 35902 */\n    UNSIGNED_INT_5_9_9_9_REV = 35902,\n    /** @default 5120 */\n    BYTE = 5120,\n    /** @default 5122 */\n    SHORT = 5122,\n    /** @default 5124 */\n    INT = 5124,\n    /** @default 5126 */\n    FLOAT = 5126,\n    /** @default 36269 */\n    FLOAT_32_UNSIGNED_INT_24_8_REV = 36269,\n    /** @default 36193 */\n    HALF_FLOAT = 36193,\n}\n\n","import { GL_TYPES } from '../../texture/const';\n\nimport type { VertexFormat } from '../../../shared/geometry/const';\n\nconst infoMap = {\n    uint8x2: GL_TYPES.UNSIGNED_BYTE,\n    uint8x4: GL_TYPES.UNSIGNED_BYTE,\n    sint8x2: GL_TYPES.BYTE,\n    sint8x4: GL_TYPES.BYTE,\n    unorm8x2: GL_TYPES.UNSIGNED_BYTE,\n    unorm8x4: GL_TYPES.UNSIGNED_BYTE,\n    snorm8x2: GL_TYPES.BYTE,\n    snorm8x4: GL_TYPES.BYTE,\n    uint16x2: GL_TYPES.UNSIGNED_SHORT,\n    uint16x4: GL_TYPES.UNSIGNED_SHORT,\n    sint16x2: GL_TYPES.SHORT,\n    sint16x4: GL_TYPES.SHORT,\n    unorm16x2: GL_TYPES.UNSIGNED_SHORT,\n    unorm16x4: GL_TYPES.UNSIGNED_SHORT,\n    snorm16x2: GL_TYPES.SHORT,\n    snorm16x4: GL_TYPES.SHORT,\n    float16x2: GL_TYPES.HALF_FLOAT,\n    float16x4: GL_TYPES.HALF_FLOAT,\n    float32: GL_TYPES.FLOAT,\n    float32x2: GL_TYPES.FLOAT,\n    float32x3: GL_TYPES.FLOAT,\n    float32x4: GL_TYPES.FLOAT,\n    uint32: GL_TYPES.UNSIGNED_INT,\n    uint32x2: GL_TYPES.UNSIGNED_INT,\n    uint32x3: GL_TYPES.UNSIGNED_INT,\n    uint32x4: GL_TYPES.UNSIGNED_INT,\n    sint32: GL_TYPES.INT,\n    sint32x2: GL_TYPES.INT,\n    sint32x3: GL_TYPES.INT,\n    sint32x4: GL_TYPES.INT\n};\n\n/**\n * @param format\n * @internal\n */\nexport function getGlTypeFromFormat(format: VertexFormat): number\n{\n    return infoMap[format] ?? infoMap.float32;\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { getAttributeInfoFromFormat } from '../../shared/geometry/utils/getAttributeInfoFromFormat';\nimport { ensureAttributes } from '../shader/program/ensureAttributes';\nimport { getGlTypeFromFormat } from './utils/getGlTypeFromFormat';\n\nimport type { Topology } from '../../shared/geometry/const';\nimport type { Geometry } from '../../shared/geometry/Geometry';\nimport type { System } from '../../shared/system/System';\nimport type { GlRenderingContext } from '../context/GlRenderingContext';\nimport type { GlProgram } from '../shader/GlProgram';\nimport type { WebGLRenderer } from '../WebGLRenderer';\n\nconst topologyToGlMap = {\n    'point-list': 0x0000,\n    'line-list': 0x0001,\n    'line-strip': 0x0003,\n    'triangle-list': 0x0004,\n    'triangle-strip': 0x0005\n};\n\n/**\n * System plugin to the renderer to manage geometry.\n * @category rendering\n * @advanced\n */\nexport class GlGeometrySystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'geometry',\n    } as const;\n\n    /**\n     * `true` if we has `*_vertex_array_object` extension.\n     * @readonly\n     */\n    public hasVao: boolean;\n\n    /**\n     * `true` if has `ANGLE_instanced_arrays` extension.\n     * @readonly\n     */\n    public hasInstance: boolean;\n\n    protected gl: GlRenderingContext;\n    protected _activeGeometry: Geometry;\n    protected _activeVao: WebGLVertexArrayObject;\n\n    protected _geometryVaoHash: Record<number, Record<string, WebGLVertexArrayObject>> = Object.create(null);\n\n    /** Renderer that owns this {@link GeometrySystem}. */\n    private _renderer: WebGLRenderer;\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: WebGLRenderer)\n    {\n        this._renderer = renderer;\n        this._activeGeometry = null;\n        this._activeVao = null;\n\n        this.hasVao = true;\n        this.hasInstance = true;\n\n        this._renderer.renderableGC.addManagedHash(this, '_geometryVaoHash');\n    }\n\n    /** Sets up the renderer context and necessary buffers. */\n    protected contextChange(): void\n    {\n        const gl = this.gl = this._renderer.gl;\n\n        if (!this._renderer.context.supports.vertexArrayObject)\n        {\n            throw new Error('[PixiJS] Vertex Array Objects are not supported on this device');\n        }\n\n        const nativeVaoExtension = this._renderer.context.extensions.vertexArrayObject;\n\n        if (nativeVaoExtension)\n        {\n            gl.createVertexArray = (): WebGLVertexArrayObject =>\n                nativeVaoExtension.createVertexArrayOES();\n\n            gl.bindVertexArray = (vao): void =>\n                nativeVaoExtension.bindVertexArrayOES(vao);\n\n            gl.deleteVertexArray = (vao): void =>\n                nativeVaoExtension.deleteVertexArrayOES(vao);\n        }\n\n        const nativeInstancedExtension = this._renderer.context.extensions.vertexAttribDivisorANGLE;\n\n        if (nativeInstancedExtension)\n        {\n            gl.drawArraysInstanced = (a, b, c, d): void =>\n            {\n                nativeInstancedExtension.drawArraysInstancedANGLE(a, b, c, d);\n            };\n\n            gl.drawElementsInstanced = (a, b, c, d, e): void =>\n            {\n                nativeInstancedExtension.drawElementsInstancedANGLE(a, b, c, d, e);\n            };\n\n            gl.vertexAttribDivisor = (a, b): void =>\n                nativeInstancedExtension.vertexAttribDivisorANGLE(a, b);\n        }\n\n        this._activeGeometry = null;\n        this._activeVao = null;\n        this._geometryVaoHash = Object.create(null);\n    }\n\n    /**\n     * Binds geometry so that is can be drawn. Creating a Vao if required\n     * @param geometry - Instance of geometry to bind.\n     * @param program - Instance of program to use vao for.\n     */\n    public bind(geometry?: Geometry, program?: GlProgram): void\n    {\n        // shader ||= this.renderer.shader.shader;\n\n        const gl = this.gl;\n\n        this._activeGeometry = geometry;\n\n        const vao = this.getVao(geometry, program);\n\n        if (this._activeVao !== vao)\n        {\n            this._activeVao = vao;\n\n            gl.bindVertexArray(vao);\n        }\n\n        this.updateBuffers();\n    }\n\n    /** Reset and unbind any active VAO and geometry. */\n    public resetState(): void\n    {\n        this.unbind();\n    }\n\n    /** Update buffers of the currently bound geometry. */\n    public updateBuffers(): void\n    {\n        const geometry = this._activeGeometry;\n\n        const bufferSystem = this._renderer.buffer;\n\n        for (let i = 0; i < geometry.buffers.length; i++)\n        {\n            const buffer = geometry.buffers[i];\n\n            bufferSystem.updateBuffer(buffer);\n        }\n    }\n\n    /**\n     * Check compatibility between a geometry and a program\n     * @param geometry - Geometry instance.\n     * @param program - Program instance.\n     */\n    protected checkCompatibility(geometry: Geometry, program: GlProgram): void\n    {\n        // geometry must have at least all the attributes that the shader requires.\n        const geometryAttributes = geometry.attributes;\n        const shaderAttributes = program._attributeData;\n\n        for (const j in shaderAttributes)\n        {\n            if (!geometryAttributes[j])\n            {\n                throw new Error(`shader and geometry incompatible, geometry missing the \"${j}\" attribute`);\n            }\n        }\n    }\n\n    /**\n     * Takes a geometry and program and generates a unique signature for them.\n     * @param geometry - To get signature from.\n     * @param program - To test geometry against.\n     * @returns - Unique signature of the geometry and program\n     */\n    protected getSignature(geometry: Geometry, program: GlProgram): string\n    {\n        const attribs = geometry.attributes;\n        const shaderAttributes = program._attributeData;\n\n        const strings = ['g', geometry.uid];\n\n        for (const i in attribs)\n        {\n            if (shaderAttributes[i])\n            {\n                strings.push(i, shaderAttributes[i].location);\n            }\n        }\n\n        return strings.join('-');\n    }\n\n    protected getVao(geometry: Geometry, program: GlProgram): WebGLVertexArrayObject\n    {\n        return this._geometryVaoHash[geometry.uid]?.[program._key] || this.initGeometryVao(geometry, program);\n    }\n\n    /**\n     * Creates or gets Vao with the same structure as the geometry and stores it on the geometry.\n     * If vao is created, it is bound automatically. We use a shader to infer what and how to set up the\n     * attribute locations.\n     * @param geometry - Instance of geometry to to generate Vao for.\n     * @param program\n     * @param _incRefCount - Increment refCount of all geometry buffers.\n     */\n    protected initGeometryVao(geometry: Geometry, program: GlProgram, _incRefCount = true): WebGLVertexArrayObject\n    {\n        const gl = this._renderer.gl;\n        // const CONTEXT_UID = this.CONTEXT_UID;\n        const bufferSystem = this._renderer.buffer;\n\n        this._renderer.shader._getProgramData(program);\n\n        this.checkCompatibility(geometry, program);\n\n        const signature = this.getSignature(geometry, program);\n\n        if (!this._geometryVaoHash[geometry.uid])\n        {\n            this._geometryVaoHash[geometry.uid] = Object.create(null);\n\n            geometry.on('destroy', this.onGeometryDestroy, this);\n        }\n\n        const vaoObjectHash = this._geometryVaoHash[geometry.uid];\n\n        let vao = vaoObjectHash[signature];\n\n        if (vao)\n        {\n            // this will give us easy access to the vao\n            vaoObjectHash[program._key] = vao;\n\n            return vao;\n        }\n\n        ensureAttributes(geometry, program._attributeData);\n\n        const buffers = geometry.buffers;\n\n        // @TODO: We don't know if VAO is supported.\n        vao = gl.createVertexArray();\n\n        gl.bindVertexArray(vao);\n\n        // first update - and create the buffers!\n        // only create a gl buffer if it actually gets\n        for (let i = 0; i < buffers.length; i++)\n        {\n            const buffer = buffers[i];\n\n            bufferSystem.bind(buffer);\n        }\n\n        // TODO - maybe make this a data object?\n        // lets wait to see if we need to first!\n\n        this.activateVao(geometry, program);\n\n        // add it to the cache!\n        vaoObjectHash[program._key] = vao;\n        vaoObjectHash[signature] = vao;\n\n        gl.bindVertexArray(null);\n\n        return vao;\n    }\n\n    /**\n     * Disposes geometry.\n     * @param geometry - Geometry with buffers. Only VAO will be disposed\n     * @param [contextLost=false] - If context was lost, we suppress deleteVertexArray\n     */\n    protected onGeometryDestroy(geometry: Geometry, contextLost?: boolean): void\n    {\n        const vaoObjectHash = this._geometryVaoHash[geometry.uid];\n\n        const gl = this.gl;\n\n        if (vaoObjectHash)\n        {\n            if (contextLost)\n            {\n                for (const i in vaoObjectHash)\n                {\n                    if (this._activeVao !== vaoObjectHash[i])\n                    {\n                        this.unbind();\n                    }\n\n                    gl.deleteVertexArray(vaoObjectHash[i]);\n                }\n            }\n\n            this._geometryVaoHash[geometry.uid] = null;\n        }\n    }\n\n    /**\n     * Dispose all WebGL resources of all managed geometries.\n     * @param [contextLost=false] - If context was lost, we suppress `gl.delete` calls\n     */\n    public destroyAll(contextLost = false): void\n    {\n        const gl = this.gl;\n\n        for (const i in this._geometryVaoHash)\n        {\n            if (contextLost)\n            {\n                for (const j in this._geometryVaoHash[i])\n                {\n                    const vaoObjectHash = this._geometryVaoHash[i];\n\n                    if (this._activeVao !== vaoObjectHash)\n                    {\n                        this.unbind();\n                    }\n\n                    gl.deleteVertexArray(vaoObjectHash[j]);\n                }\n            }\n\n            this._geometryVaoHash[i] = null;\n        }\n    }\n\n    /**\n     * Activate vertex array object.\n     * @param geometry - Geometry instance.\n     * @param program - Shader program instance.\n     */\n    protected activateVao(geometry: Geometry, program: GlProgram): void\n    {\n        const gl = this._renderer.gl;\n\n        const bufferSystem = this._renderer.buffer;\n        const attributes = geometry.attributes;\n\n        if (geometry.indexBuffer)\n        {\n            // first update the index buffer if we have one..\n            bufferSystem.bind(geometry.indexBuffer);\n        }\n\n        let lastBuffer = null;\n\n        // add a new one!\n        for (const j in attributes)\n        {\n            const attribute = attributes[j];\n            const buffer = attribute.buffer;\n            const glBuffer = bufferSystem.getGlBuffer(buffer);\n            const programAttrib = program._attributeData[j];\n\n            if (programAttrib)\n            {\n                if (lastBuffer !== glBuffer)\n                {\n                    bufferSystem.bind(buffer);\n\n                    lastBuffer = glBuffer;\n                }\n\n                const location = programAttrib.location;\n\n                // TODO introduce state again\n                // we can optimise this for older devices that have no VAOs\n                gl.enableVertexAttribArray(location);\n\n                const attributeInfo = getAttributeInfoFromFormat(attribute.format);\n\n                const type = getGlTypeFromFormat(attribute.format);\n\n                if (programAttrib.format?.substring(1, 4) === 'int')\n                {\n                    gl.vertexAttribIPointer(location,\n                        attributeInfo.size,\n                        type,\n                        attribute.stride,\n                        attribute.offset);\n                }\n                else\n                {\n                    gl.vertexAttribPointer(location,\n                        attributeInfo.size,\n                        type,\n                        attributeInfo.normalised,\n                        attribute.stride,\n                        attribute.offset);\n                }\n\n                if (attribute.instance)\n                {\n                    // TODO calculate instance count based of this...\n                    if (this.hasInstance)\n                    {\n                        // Can't use truthiness check to determine if divisor is set,\n                        // since 0 is a valid value for divisor\n                        const divisor = attribute.divisor ?? 1;\n\n                        gl.vertexAttribDivisor(location, divisor);\n                    }\n                    else\n                    {\n                        throw new Error('geometry error, GPU Instancing is not supported on this device');\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Draws the currently bound geometry.\n     * @param topology - The type primitive to render.\n     * @param size - The number of elements to be rendered. If not specified, all vertices after the\n     *  starting vertex will be drawn.\n     * @param start - The starting vertex in the geometry to start drawing from. If not specified,\n     *  drawing will start from the first vertex.\n     * @param instanceCount - The number of instances of the set of elements to execute. If not specified,\n     *  all instances will be drawn.\n     */\n    public draw(topology?: Topology, size?: number, start?: number, instanceCount?: number): this\n    {\n        const { gl } = this._renderer;\n        const geometry = this._activeGeometry;\n\n        const glTopology = topologyToGlMap[topology || geometry.topology];\n\n        instanceCount ??= geometry.instanceCount;\n\n        if (geometry.indexBuffer)\n        {\n            const byteSize = geometry.indexBuffer.data.BYTES_PER_ELEMENT;\n            const glType = byteSize === 2 ? gl.UNSIGNED_SHORT : gl.UNSIGNED_INT;\n\n            if (instanceCount > 1)\n            {\n                /* eslint-disable max-len */\n                gl.drawElementsInstanced(glTopology, size || geometry.indexBuffer.data.length, glType, (start || 0) * byteSize, instanceCount);\n                /* eslint-enable max-len */\n            }\n            else\n            {\n                gl.drawElements(glTopology, size || geometry.indexBuffer.data.length, glType, (start || 0) * byteSize);\n            }\n        }\n        else if (instanceCount > 1)\n        {\n            // TODO need a better way to calculate size..\n            gl.drawArraysInstanced(glTopology, start || 0, size || geometry.getSize(), instanceCount);\n        }\n        else\n        {\n            gl.drawArrays(glTopology, start || 0, size || geometry.getSize());\n        }\n\n        return this;\n    }\n\n    /** Unbind/reset everything. */\n    protected unbind(): void\n    {\n        this.gl.bindVertexArray(null);\n        this._activeVao = null;\n        this._activeGeometry = null;\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null;\n        this.gl = null;\n        this._activeVao = null;\n        this._activeGeometry = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { warn } from '../../../utils/logging/warn';\nimport { Geometry } from '../shared/geometry/Geometry';\nimport { Shader } from '../shared/shader/Shader';\nimport { State } from '../shared/state/State';\nimport { TextureSource } from '../shared/texture/sources/TextureSource';\nimport { Texture } from '../shared/texture/Texture';\nimport { GlProgram } from './shader/GlProgram';\n\nimport type { RenderOptions } from '../shared/system/AbstractRenderer';\nimport type { System } from '../shared/system/System';\nimport type { WebGLRenderer } from './WebGLRenderer';\n\nconst bigTriangleGeometry = new Geometry({\n    attributes: {\n        aPosition: [\n            -1.0, -1.0, // Bottom left corner\n            3.0, -1.0, // Bottom right corner, extending beyond right edge\n            -1.0, 3.0 // Top left corner, extending beyond top edge\n        ],\n    },\n});\n\n/**\n * The options for the back buffer system.\n * @category rendering\n * @property {boolean} [useBackBuffer=false] - if true will use the back buffer where required\n * @property {boolean} [antialias=false] - if true will ensure the texture is antialiased\n * @advanced\n */\nexport interface GlBackBufferOptions\n{\n    /**\n     * if true will use the back buffer where required\n     * @default false\n     */\n    useBackBuffer?: boolean;\n    /** if true will ensure the texture is antialiased */\n    antialias?: boolean;\n}\n\n/**\n * For blend modes you need to know what pixels you are actually drawing to. For this to be possible in WebGL\n * we need to render to a texture and then present that texture to the screen. This system manages that process.\n *\n * As the main scene is rendered to a texture, it means we can sample it and copy its pixels,\n * something not possible on the main canvas.\n *\n * If antialiasing is set to to true and useBackBuffer is set to true, then the back buffer will be antialiased.\n * and the main gl context will not.\n *\n * You only need to activate this back buffer if you are using a blend mode that requires it.\n *\n * to activate is simple, you pass `useBackBuffer:true` to your render options\n * @category rendering\n * @advanced\n */\nexport class GlBackBufferSystem implements System<GlBackBufferOptions>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'backBuffer',\n        priority: 1\n    } as const;\n\n    /** default options for the back buffer system */\n    public static defaultOptions: GlBackBufferOptions = {\n        /** if true will use the back buffer where required */\n        useBackBuffer: false,\n    };\n\n    /** if true, the back buffer is used */\n    public useBackBuffer = false;\n\n    private _backBufferTexture: Texture;\n    private readonly _renderer: WebGLRenderer;\n    private _targetTexture: TextureSource;\n    private _useBackBufferThisRender = false;\n    private _antialias: boolean;\n    private _state: State;\n    private _bigTriangleShader: Shader;\n\n    constructor(renderer: WebGLRenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public init(options: GlBackBufferOptions = {})\n    {\n        const { useBackBuffer, antialias } = { ...GlBackBufferSystem.defaultOptions, ...options };\n\n        this.useBackBuffer = useBackBuffer;\n\n        this._antialias = antialias;\n\n        if (!this._renderer.context.supports.msaa)\n        {\n            warn('antialiasing, is not supported on when using the back buffer');\n\n            this._antialias = false;\n        }\n\n        this._state = State.for2d();\n\n        const bigTriangleProgram = new GlProgram({\n            vertex: `\n                attribute vec2 aPosition;\n                out vec2 vUv;\n\n                void main() {\n                    gl_Position = vec4(aPosition, 0.0, 1.0);\n\n                    vUv = (aPosition + 1.0) / 2.0;\n\n                    // flip dem UVs\n                    vUv.y = 1.0 - vUv.y;\n                }`,\n            fragment: `\n                in vec2 vUv;\n                out vec4 finalColor;\n\n                uniform sampler2D uTexture;\n\n                void main() {\n                    finalColor = texture(uTexture, vUv);\n                }`,\n            name: 'big-triangle',\n        });\n\n        this._bigTriangleShader = new Shader({\n            glProgram: bigTriangleProgram,\n            resources: {\n                uTexture: Texture.WHITE.source,\n            },\n        });\n    }\n\n    /**\n     * This is called before the RenderTargetSystem is started. This is where\n     * we replace the target with the back buffer if required.\n     * @param options - The options for this render.\n     */\n    protected renderStart(options: RenderOptions)\n    {\n        const renderTarget = this._renderer.renderTarget.getRenderTarget(options.target);\n\n        this._useBackBufferThisRender = this.useBackBuffer && !!renderTarget.isRoot;\n\n        if (this._useBackBufferThisRender)\n        {\n            const renderTarget = this._renderer.renderTarget.getRenderTarget(options.target);\n\n            this._targetTexture = renderTarget.colorTexture;\n\n            options.target = this._getBackBufferTexture(renderTarget.colorTexture);\n        }\n    }\n\n    protected renderEnd()\n    {\n        this._presentBackBuffer();\n    }\n\n    private _presentBackBuffer()\n    {\n        const renderer = this._renderer;\n\n        renderer.renderTarget.finishRenderPass();\n\n        if (!this._useBackBufferThisRender) return;\n\n        renderer.renderTarget.bind(this._targetTexture, false);\n\n        this._bigTriangleShader.resources.uTexture = this._backBufferTexture.source;\n\n        renderer.encoder.draw({\n            geometry: bigTriangleGeometry,\n            shader: this._bigTriangleShader,\n            state: this._state,\n        });\n    }\n\n    private _getBackBufferTexture(targetSourceTexture: TextureSource)\n    {\n        this._backBufferTexture = this._backBufferTexture || new Texture({\n            source: new TextureSource({\n                width: targetSourceTexture.width,\n                height: targetSourceTexture.height,\n                resolution: targetSourceTexture._resolution,\n                antialias: this._antialias,\n            }),\n        });\n\n        // this will not resize if its the same size already! No extra check required\n        this._backBufferTexture.source.resize(\n            targetSourceTexture.width,\n            targetSourceTexture.height,\n            targetSourceTexture._resolution,\n        );\n\n        return this._backBufferTexture;\n    }\n\n    /** destroys the back buffer */\n    public destroy()\n    {\n        if (this._backBufferTexture)\n        {\n            this._backBufferTexture.destroy();\n            this._backBufferTexture = null;\n        }\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\n\nimport type { System } from '../shared/system/System';\nimport type { WebGLRenderer } from './WebGLRenderer';\n\n/**\n * The system that handles color masking for the WebGL.\n * @category rendering\n * @advanced\n */\nexport class GlColorMaskSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'colorMask',\n    } as const;\n\n    private readonly _renderer: WebGLRenderer;\n    private _colorMaskCache = 0b1111;\n\n    constructor(renderer: WebGLRenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public setMask(colorMask: number)\n    {\n        if (this._colorMaskCache === colorMask) return;\n        this._colorMaskCache = colorMask;\n\n        this._renderer.gl.colorMask(\n            !!(colorMask & 0b1000),\n            !!(colorMask & 0b0100),\n            !!(colorMask & 0b0010),\n            !!(colorMask & 0b0001)\n        );\n    }\n\n    public destroy?: () => void;\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\n\nimport type { Topology } from '../shared/geometry/const';\nimport type { Geometry } from '../shared/geometry/Geometry';\nimport type { Shader } from '../shared/shader/Shader';\nimport type { State } from '../shared/state/State';\nimport type { System } from '../shared/system/System';\nimport type { WebGLRenderer } from './WebGLRenderer';\n\n/**\n * The system that handles encoding commands for the WebGL.\n * @category rendering\n * @advanced\n */\nexport class GlEncoderSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'encoder',\n    } as const;\n\n    public readonly commandFinished = Promise.resolve();\n    private readonly _renderer: WebGLRenderer;\n\n    constructor(renderer: WebGLRenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public setGeometry(geometry: Geometry, shader?: Shader)\n    {\n        this._renderer.geometry.bind(geometry, shader.glProgram);\n    }\n\n    public finishRenderPass()\n    {\n        // noop\n    }\n\n    public draw(options: {\n        geometry: Geometry,\n        shader: Shader,\n        state?: State,\n        topology?: Topology,\n        size?: number,\n        start?: number,\n        instanceCount?: number\n        skipSync?: boolean,\n    })\n    {\n        const renderer = this._renderer;\n        const { geometry, shader, state, skipSync, topology: type, size, start, instanceCount } = options;\n\n        renderer.shader.bind(shader, skipSync);\n\n        renderer.geometry.bind(geometry, renderer.shader._activeProgram);\n\n        if (state)\n        {\n            renderer.state.set(state);\n        }\n\n        renderer.geometry.draw(type, size, start, instanceCount ?? geometry.instanceCount);\n    }\n\n    public destroy()\n    {\n        (this._renderer as null) = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { checkMaxIfStatementsInShader } from '../../batcher/gl/utils/checkMaxIfStatementsInShader';\nimport { type System } from '../shared/system/System';\n\nimport type { WebGLRenderer } from './WebGLRenderer';\n/**\n * The GpuLimitsSystem provides information about the capabilities and limitations of the underlying GPU.\n * These limits, such as the maximum number of textures that can be used in a shader\n * (`maxTextures`) or the maximum number of textures that can be batched together (`maxBatchableTextures`),\n * are determined by the specific graphics hardware and driver.\n *\n * The values for these limits are not available immediately upon instantiation of the class.\n * They are populated when the GL rendering context is successfully initialized and ready,\n * which occurs after the `renderer.init()` method has completed.\n * Attempting to access these properties before the context is ready will result in undefined or default values.\n *\n * This system allows the renderer to adapt its behavior and resource allocation strategies\n * to stay within the supported boundaries of the GPU, ensuring optimal performance and stability.\n * @example\n * ```ts\n * const renderer = new WebGlRenderer();\n * await renderer.init();\n *\n * console.log(renderer.limits.maxTextures);\n * ```\n * @category rendering\n * @advanced\n */\nexport class GlLimitsSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'limits',\n    } as const;\n\n    /** The maximum number of textures that can be used by a shader */\n    public maxTextures: number;\n    /** The maximum number of batchable textures */\n    public maxBatchableTextures: number;\n\n    /** The maximum number of uniform bindings */\n    public maxUniformBindings: number;\n\n    private readonly _renderer: WebGLRenderer;\n\n    constructor(renderer: WebGLRenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public contextChange(): void\n    {\n        const gl = this._renderer.gl;\n\n        // step 1: first check max textures the GPU can handle.\n        this.maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n\n        // step 2: check the maximum number of if statements the shader can have too..\n        this.maxBatchableTextures = checkMaxIfStatementsInShader(this.maxTextures, gl);\n\n        this.maxUniformBindings = gl.getParameter(gl.MAX_UNIFORM_BUFFER_BINDINGS);\n    }\n\n    public destroy(): void\n    {\n        // boom!\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { GpuStencilModesToPixi } from '../gpu/state/GpuStencilModesToPixi';\nimport { STENCIL_MODES } from '../shared/state/const';\n\nimport type { RenderTarget } from '../shared/renderTarget/RenderTarget';\nimport type { System } from '../shared/system/System';\nimport type { WebGLRenderer } from './WebGLRenderer';\n\n/**\n * This manages the stencil buffer. Used primarily for masking\n * @category rendering\n * @advanced\n */\nexport class GlStencilSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'stencil',\n    } as const;\n\n    private _gl: WebGLRenderingContext;\n\n    private readonly _stencilCache = {\n        enabled: false,\n        stencilReference: 0,\n        stencilMode: STENCIL_MODES.NONE,\n    };\n\n    private _renderTargetStencilState: Record<number, {\n        stencilMode: STENCIL_MODES;\n        stencilReference: number;\n    }> = Object.create(null);\n\n    private _stencilOpsMapping: {\n        keep: number;\n        zero: number;\n        replace: number;\n        invert: number;\n        'increment-clamp': number;\n        'decrement-clamp': number;\n        'increment-wrap': number;\n        'decrement-wrap': number;\n    };\n\n    private _comparisonFuncMapping: {\n        always: number;\n        never: number;\n        equal: number;\n        'not-equal': number;\n        less: number;\n        'less-equal': number;\n        greater: number;\n        'greater-equal': number;\n    };\n\n    private _activeRenderTarget: RenderTarget;\n\n    constructor(renderer: WebGLRenderer)\n    {\n        renderer.renderTarget.onRenderTargetChange.add(this);\n    }\n\n    protected contextChange(gl: WebGLRenderingContext)\n    {\n        // TODO - this could be declared in a gl const\n        // we know the numbers don't tend to change!\n        this._gl = gl;\n\n        this._comparisonFuncMapping = {\n            always: gl.ALWAYS,\n            never: gl.NEVER,\n            equal: gl.EQUAL,\n            'not-equal': gl.NOTEQUAL,\n            less: gl.LESS,\n            'less-equal': gl.LEQUAL,\n            greater: gl.GREATER,\n            'greater-equal': gl.GEQUAL,\n        };\n\n        this._stencilOpsMapping = {\n            keep: gl.KEEP,\n            zero: gl.ZERO,\n            replace: gl.REPLACE,\n            invert: gl.INVERT,\n            'increment-clamp': gl.INCR,\n            'decrement-clamp': gl.DECR,\n            'increment-wrap': gl.INCR_WRAP,\n            'decrement-wrap': gl.DECR_WRAP,\n        };\n\n        this.resetState();\n    }\n\n    protected onRenderTargetChange(renderTarget: RenderTarget)\n    {\n        if (this._activeRenderTarget === renderTarget) return;\n\n        this._activeRenderTarget = renderTarget;\n\n        let stencilState = this._renderTargetStencilState[renderTarget.uid];\n\n        if (!stencilState)\n        {\n            stencilState = this._renderTargetStencilState[renderTarget.uid] = {\n                stencilMode: STENCIL_MODES.DISABLED,\n                stencilReference: 0,\n            };\n        }\n\n        // restore the current render targets stencil state..\n        this.setStencilMode(stencilState.stencilMode, stencilState.stencilReference);\n    }\n\n    public resetState()\n    {\n        // reset stencil cache\n        this._stencilCache.enabled = false;\n        this._stencilCache.stencilMode = STENCIL_MODES.NONE;\n        this._stencilCache.stencilReference = 0;\n    }\n\n    public setStencilMode(stencilMode: STENCIL_MODES, stencilReference: number)\n    {\n        const stencilState = this._renderTargetStencilState[this._activeRenderTarget.uid];\n\n        const gl = this._gl;\n        const mode = GpuStencilModesToPixi[stencilMode];\n\n        const _stencilCache = this._stencilCache;\n\n        // store the stencil state for restoration later, if a render target changes\n        stencilState.stencilMode = stencilMode;\n        stencilState.stencilReference = stencilReference;\n\n        if (stencilMode === STENCIL_MODES.DISABLED)\n        {\n            if (this._stencilCache.enabled)\n            {\n                this._stencilCache.enabled = false;\n\n                gl.disable(gl.STENCIL_TEST);\n            }\n\n            return;\n        }\n\n        if (!this._stencilCache.enabled)\n        {\n            this._stencilCache.enabled = true;\n            gl.enable(gl.STENCIL_TEST);\n        }\n\n        if (stencilMode !== _stencilCache.stencilMode || _stencilCache.stencilReference !== stencilReference)\n        {\n            _stencilCache.stencilMode = stencilMode;\n            _stencilCache.stencilReference = stencilReference;\n\n            // this is pretty simple mapping.\n            // will work for pixi's simple mask cases.\n            // although a true mapping of the GPU state to webGL state should be done\n            gl.stencilFunc(this._comparisonFuncMapping[mode.stencilBack.compare], stencilReference, 0xFF);\n            gl.stencilOp(gl.KEEP, gl.KEEP, this._stencilOpsMapping[mode.stencilBack.passOp]);\n        }\n    }\n\n    public destroy?: () => void;\n}\n","import type { UboElement, UboLayout, UniformData } from '../../../shared/shader/types';\n\n/** @internal */\nexport const WGSL_TO_STD40_SIZE: Record<string, number> = {\n    f32: 4,\n    i32: 4,\n    'vec2<f32>': 8,\n    'vec3<f32>': 12,\n    'vec4<f32>': 16,\n\n    'vec2<i32>': 8,\n    'vec3<i32>': 12,\n    'vec4<i32>': 16,\n\n    'mat2x2<f32>': 16 * 2,\n    'mat3x3<f32>': 16 * 3,\n    'mat4x4<f32>': 16 * 4,\n\n    // TODO - not essential for now but support these in the future\n    // int:      4,\n    // ivec2:    8,\n    // ivec3:    12,\n    // ivec4:    16,\n\n    // uint:     4,\n    // uvec2:    8,\n    // uvec3:    12,\n    // uvec4:    16,\n\n    // bool:     4,\n    // bvec2:    8,\n    // bvec3:    12,\n    // bvec4:    16,\n\n    // mat2:     16 * 2,\n    // mat3:     16 * 3,\n    // mat4:     16 * 4,\n};\n\n/**\n * @param uniformData\n * @internal\n */\nexport function createUboElementsSTD40(uniformData: UniformData[]): UboLayout\n{\n    const uboElements: UboElement[] = uniformData.map((data: UniformData) =>\n        ({\n            data,\n            offset: 0,\n            size: 0,\n        }));\n\n    const chunkSize = 16;\n\n    let size = 0;\n    let offset = 0;\n\n    for (let i = 0; i < uboElements.length; i++)\n    {\n        const uboElement = uboElements[i];\n\n        size = WGSL_TO_STD40_SIZE[uboElement.data.type];\n\n        if (!size)\n        {\n            throw new Error(`Unknown type ${uboElement.data.type}`);\n        }\n\n        if (uboElement.data.size > 1)\n        {\n            size = Math.max(size, chunkSize) * uboElement.data.size;\n        }\n\n        const boundary = size === 12 ? 16 : size;\n\n        uboElement.size = size;\n\n        const curOffset = offset % chunkSize;\n\n        if (curOffset > 0 && chunkSize - curOffset < boundary)\n        {\n            offset += (chunkSize - curOffset) % 16;\n        }\n        else\n        {\n            offset += (size - (curOffset % size)) % size;\n        }\n\n        uboElement.offset = offset;\n        offset += size;\n    }\n\n    offset = Math.ceil(offset / 16) * 16;\n\n    return { uboElements, size: offset };\n}\n\n","import { WGSL_TO_STD40_SIZE } from './createUboElementsSTD40';\n\nimport type { UboElement } from '../../../shared/shader/types';\n\n/**\n * This generates a function that will sync an array to the uniform buffer\n * following the std140 layout\n * @param uboElement - the element to generate the array sync for\n * @param offsetToAdd - the offset to append at the start of the code\n * @returns - the generated code\n * @internal\n */\nexport function generateArraySyncSTD40(uboElement: UboElement, offsetToAdd: number): string\n{\n    const rowSize = Math.max(WGSL_TO_STD40_SIZE[uboElement.data.type] / 16, 1);\n    const elementSize = (uboElement.data.value as Array<number>).length / uboElement.data.size;// size / rowSize;\n\n    const remainder = (4 - (elementSize % 4)) % 4;\n    const data = uboElement.data.type.indexOf('i32') >= 0 ? 'dataInt32' : 'data';\n\n    return `\n        v = uv.${uboElement.data.name};\n        offset += ${offsetToAdd};\n\n        arrayOffset = offset;\n\n        t = 0;\n\n        for(var i=0; i < ${uboElement.data.size * rowSize}; i++)\n        {\n            for(var j = 0; j < ${elementSize}; j++)\n            {\n                ${data}[arrayOffset++] = v[t++];\n            }\n            ${remainder !== 0 ? `arrayOffset += ${remainder};` : ''}\n        }\n    `;\n}\n","import { createUboSyncFunction } from '../../../shared/shader/utils/createUboSyncFunction';\nimport { uboSyncFunctionsSTD40 } from '../../../shared/shader/utils/uboSyncFunctions';\nimport { generateArraySyncSTD40 } from './generateArraySyncSTD40';\n\nimport type { UboElement, UniformsSyncCallback } from '../../../shared/shader/types';\n\n/**\n * @param uboElements\n * @internal\n */\nexport function createUboSyncFunctionSTD40(\n    uboElements: UboElement[],\n): UniformsSyncCallback\n{\n    return createUboSyncFunction(\n        uboElements,\n        'uboStd40',\n        generateArraySyncSTD40,\n        uboSyncFunctionsSTD40,\n    );\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { UboSystem } from '../shared/shader/UboSystem';\nimport { createUboElementsSTD40 } from './shader/utils/createUboElementsSTD40';\nimport { createUboSyncFunctionSTD40 } from './shader/utils/createUboSyncSTD40';\n\n/**\n * System plugin to the renderer to manage uniform buffers. But with an WGSL adaptor.\n * @category rendering\n * @advanced\n */\nexport class GlUboSystem extends UboSystem\n{\n    /** @ignore */\n    public static extension = {\n        type: [ExtensionType.WebGLSystem],\n        name: 'ubo',\n    } as const;\n\n    constructor()\n    {\n        super({\n            createUboElements: createUboElementsSTD40,\n            generateUboSync: createUboSyncFunctionSTD40,\n        });\n    }\n}\n","/**\n * Represents a render target.\n * @category rendering\n * @ignore\n */\nexport class GlRenderTarget\n{\n    public width = -1;\n    public height = -1;\n    public msaa = false;\n    public framebuffer: WebGLFramebuffer;\n    public resolveTargetFramebuffer: WebGLFramebuffer;\n    public msaaRenderBuffer: WebGLRenderbuffer[] = [];\n    public depthStencilRenderBuffer: WebGLRenderbuffer;\n}\n","import { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport { warn } from '../../../../utils/logging/warn';\nimport { CanvasSource } from '../../shared/texture/sources/CanvasSource';\nimport { CLEAR } from '../const';\nimport { GlRenderTarget } from '../GlRenderTarget';\n\nimport type { RgbaArray } from '../../../../color/Color';\nimport type { RenderTarget } from '../../shared/renderTarget/RenderTarget';\nimport type { RenderTargetAdaptor, RenderTargetSystem } from '../../shared/renderTarget/RenderTargetSystem';\nimport type { Texture } from '../../shared/texture/Texture';\nimport type { CLEAR_OR_BOOL } from '../const';\nimport type { WebGLRenderer } from '../WebGLRenderer';\n\n/**\n * The WebGL adaptor for the render target system. Allows the Render Target System to be used with the WebGL renderer\n * @category rendering\n * @ignore\n */\nexport class GlRenderTargetAdaptor implements RenderTargetAdaptor<GlRenderTarget>\n{\n    private _renderTargetSystem: RenderTargetSystem<GlRenderTarget>;\n    private _renderer: WebGLRenderer<HTMLCanvasElement>;\n    private _clearColorCache: RgbaArray = [0, 0, 0, 0];\n    private _viewPortCache: Rectangle = new Rectangle();\n\n    public init(renderer: WebGLRenderer, renderTargetSystem: RenderTargetSystem<GlRenderTarget>): void\n    {\n        this._renderer = renderer;\n        this._renderTargetSystem = renderTargetSystem;\n\n        renderer.runners.contextChange.add(this);\n    }\n\n    public contextChange(): void\n    {\n        this._clearColorCache = [0, 0, 0, 0];\n        this._viewPortCache = new Rectangle();\n    }\n\n    public copyToTexture(\n        sourceRenderSurfaceTexture: RenderTarget,\n        destinationTexture: Texture,\n        originSrc: { x: number; y: number; },\n        size: { width: number; height: number; },\n        originDest: { x: number; y: number; },\n    )\n    {\n        const renderTargetSystem = this._renderTargetSystem;\n\n        const renderer = this._renderer;\n        const glRenderTarget = renderTargetSystem.getGpuRenderTarget(sourceRenderSurfaceTexture);\n        const gl = renderer.gl;\n\n        this.finishRenderPass(sourceRenderSurfaceTexture);\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, glRenderTarget.resolveTargetFramebuffer);\n\n        renderer.texture.bind(destinationTexture, 0);\n\n        gl.copyTexSubImage2D(gl.TEXTURE_2D, 0,\n            originDest.x, originDest.y,\n            originSrc.x,\n            originSrc.y,\n            size.width,\n            size.height\n        );\n\n        return destinationTexture;\n    }\n\n    public startRenderPass(\n        renderTarget: RenderTarget,\n        clear: CLEAR_OR_BOOL = true,\n        clearColor?: RgbaArray,\n        viewport?: Rectangle\n    )\n    {\n        const renderTargetSystem = this._renderTargetSystem;\n\n        const source = renderTarget.colorTexture;\n        const gpuRenderTarget = renderTargetSystem.getGpuRenderTarget(renderTarget);\n\n        let viewPortY = viewport.y;\n\n        if (renderTarget.isRoot)\n        {\n            // /TODO this is the same logic?\n            viewPortY = source.pixelHeight - viewport.height;\n        }\n\n        // unbind the current render texture..\n        renderTarget.colorTextures.forEach((texture) =>\n        {\n            this._renderer.texture.unbind(texture);\n        });\n\n        const gl = this._renderer.gl;\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, gpuRenderTarget.framebuffer);\n\n        const viewPortCache = this._viewPortCache;\n\n        if (viewPortCache.x !== viewport.x\n            || viewPortCache.y !== viewPortY\n            || viewPortCache.width !== viewport.width\n            || viewPortCache.height !== viewport.height)\n        {\n            viewPortCache.x = viewport.x;\n            viewPortCache.y = viewPortY;\n            viewPortCache.width = viewport.width;\n            viewPortCache.height = viewport.height;\n\n            gl.viewport(\n                viewport.x,\n                viewPortY,\n                viewport.width,\n                viewport.height,\n            );\n        }\n\n        // if the stencil buffer has been requested, we need to create a stencil buffer\n        if (!gpuRenderTarget.depthStencilRenderBuffer && (renderTarget.stencil || renderTarget.depth))\n        {\n            this._initStencil(gpuRenderTarget);\n        }\n\n        this.clear(renderTarget, clear, clearColor);\n    }\n\n    public finishRenderPass(renderTarget?: RenderTarget)\n    {\n        const renderTargetSystem = this._renderTargetSystem;\n\n        const glRenderTarget = renderTargetSystem.getGpuRenderTarget(renderTarget);\n\n        if (!glRenderTarget.msaa) return;\n\n        const gl = this._renderer.gl;\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, glRenderTarget.resolveTargetFramebuffer);\n        gl.bindFramebuffer(gl.READ_FRAMEBUFFER, glRenderTarget.framebuffer);\n\n        gl.blitFramebuffer(\n            0, 0, glRenderTarget.width, glRenderTarget.height,\n            0, 0, glRenderTarget.width, glRenderTarget.height,\n            gl.COLOR_BUFFER_BIT, gl.NEAREST,\n        );\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, glRenderTarget.framebuffer);\n\n        // dont think we need this anymore? keeping around just in case the wheels fall off\n        // gl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);\n    }\n\n    public initGpuRenderTarget(renderTarget: RenderTarget): GlRenderTarget\n    {\n        const renderer = this._renderer;\n\n        const gl = renderer.gl;\n\n        // do single...\n\n        const glRenderTarget = new GlRenderTarget();\n\n        // we are rendering to the main canvas..\n        const colorTexture = renderTarget.colorTexture;\n\n        if (colorTexture instanceof CanvasSource)\n        {\n            this._renderer.context.ensureCanvasSize(renderTarget.colorTexture.resource);\n\n            glRenderTarget.framebuffer = null;\n\n            return glRenderTarget;\n        }\n\n        this._initColor(renderTarget, glRenderTarget);\n\n        // set up a depth texture..\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n        return glRenderTarget;\n    }\n\n    public destroyGpuRenderTarget(gpuRenderTarget: GlRenderTarget)\n    {\n        const gl = this._renderer.gl;\n\n        if (gpuRenderTarget.framebuffer)\n        {\n            gl.deleteFramebuffer(gpuRenderTarget.framebuffer);\n            gpuRenderTarget.framebuffer = null;\n        }\n\n        if (gpuRenderTarget.resolveTargetFramebuffer)\n        {\n            gl.deleteFramebuffer(gpuRenderTarget.resolveTargetFramebuffer);\n            gpuRenderTarget.resolveTargetFramebuffer = null;\n        }\n\n        if (gpuRenderTarget.depthStencilRenderBuffer)\n        {\n            gl.deleteRenderbuffer(gpuRenderTarget.depthStencilRenderBuffer);\n            gpuRenderTarget.depthStencilRenderBuffer = null;\n        }\n\n        gpuRenderTarget.msaaRenderBuffer.forEach((renderBuffer) =>\n        {\n            gl.deleteRenderbuffer(renderBuffer);\n        });\n\n        gpuRenderTarget.msaaRenderBuffer = null;\n    }\n\n    public clear(_renderTarget: RenderTarget, clear: CLEAR_OR_BOOL, clearColor?: RgbaArray)\n    {\n        if (!clear) return;\n\n        const renderTargetSystem = this._renderTargetSystem;\n\n        // if clear is boolean..\n        if (typeof clear === 'boolean')\n        {\n            clear = clear ? CLEAR.ALL : CLEAR.NONE;\n        }\n\n        const gl = this._renderer.gl;\n\n        if (clear & CLEAR.COLOR)\n        {\n            clearColor ??= renderTargetSystem.defaultClearColor;\n\n            const clearColorCache = this._clearColorCache;\n            const clearColorArray = clearColor as number[];\n\n            if (clearColorCache[0] !== clearColorArray[0]\n                || clearColorCache[1] !== clearColorArray[1]\n                || clearColorCache[2] !== clearColorArray[2]\n                || clearColorCache[3] !== clearColorArray[3])\n            {\n                clearColorCache[0] = clearColorArray[0];\n                clearColorCache[1] = clearColorArray[1];\n                clearColorCache[2] = clearColorArray[2];\n                clearColorCache[3] = clearColorArray[3];\n\n                gl.clearColor(clearColorArray[0], clearColorArray[1], clearColorArray[2], clearColorArray[3]);\n            }\n        }\n\n        gl.clear(clear);\n    }\n\n    public resizeGpuRenderTarget(renderTarget: RenderTarget)\n    {\n        if (renderTarget.isRoot) return;\n\n        const renderTargetSystem = this._renderTargetSystem;\n\n        const glRenderTarget = renderTargetSystem.getGpuRenderTarget(renderTarget);\n\n        this._resizeColor(renderTarget, glRenderTarget);\n\n        if (renderTarget.stencil || renderTarget.depth)\n        {\n            this._resizeStencil(glRenderTarget);\n        }\n    }\n\n    private _initColor(renderTarget: RenderTarget, glRenderTarget: GlRenderTarget)\n    {\n        const renderer = this._renderer;\n\n        const gl = renderer.gl;\n        // deal with our outputs..\n        const resolveTargetFramebuffer = gl.createFramebuffer();\n\n        glRenderTarget.resolveTargetFramebuffer = resolveTargetFramebuffer;\n\n        // set up the texture..\n        gl.bindFramebuffer(gl.FRAMEBUFFER, resolveTargetFramebuffer);\n\n        glRenderTarget.width = renderTarget.colorTexture.source.pixelWidth;\n        glRenderTarget.height = renderTarget.colorTexture.source.pixelHeight;\n\n        renderTarget.colorTextures.forEach((colorTexture, i) =>\n        {\n            const source = colorTexture.source;\n\n            if (source.antialias)\n            {\n                if (renderer.context.supports.msaa)\n                {\n                    glRenderTarget.msaa = true;\n                }\n                else\n                {\n                    warn('[RenderTexture] Antialiasing on textures is not supported in WebGL1');\n                }\n            }\n\n            // TODO bindSource could return the glTexture\n            renderer.texture.bindSource(source, 0);\n            const glSource = renderer.texture.getGlSource(source);\n\n            const glTexture = glSource.texture;\n\n            gl.framebufferTexture2D(gl.FRAMEBUFFER,\n                gl.COLOR_ATTACHMENT0 + i,\n                3553, // texture.target,\n                glTexture,\n                0);// mipLevel);\n        });\n\n        if (glRenderTarget.msaa)\n        {\n            const viewFramebuffer = gl.createFramebuffer();\n\n            glRenderTarget.framebuffer = viewFramebuffer;\n\n            gl.bindFramebuffer(gl.FRAMEBUFFER, viewFramebuffer);\n\n            renderTarget.colorTextures.forEach((_, i) =>\n            {\n                const msaaRenderBuffer = gl.createRenderbuffer();\n\n                glRenderTarget.msaaRenderBuffer[i] = msaaRenderBuffer;\n            });\n        }\n        else\n        {\n            glRenderTarget.framebuffer = resolveTargetFramebuffer;\n        }\n\n        this._resizeColor(renderTarget, glRenderTarget);\n    }\n\n    private _resizeColor(renderTarget: RenderTarget, glRenderTarget: GlRenderTarget)\n    {\n        const source = renderTarget.colorTexture.source;\n\n        glRenderTarget.width = source.pixelWidth;\n        glRenderTarget.height = source.pixelHeight;\n\n        renderTarget.colorTextures.forEach((colorTexture, i) =>\n        {\n            // nno need to resize the first texture..\n            if (i === 0) return;\n\n            colorTexture.source.resize(source.width, source.height, source._resolution);\n        });\n\n        if (glRenderTarget.msaa)\n        {\n            const renderer = this._renderer;\n            const gl = renderer.gl;\n\n            const viewFramebuffer = glRenderTarget.framebuffer;\n\n            gl.bindFramebuffer(gl.FRAMEBUFFER, viewFramebuffer);\n\n            renderTarget.colorTextures.forEach((colorTexture, i) =>\n            {\n                const source = colorTexture.source;\n\n                renderer.texture.bindSource(source, 0);\n                const glSource = renderer.texture.getGlSource(source);\n\n                const glInternalFormat = glSource.internalFormat;\n\n                const msaaRenderBuffer = glRenderTarget.msaaRenderBuffer[i];\n\n                gl.bindRenderbuffer(\n                    gl.RENDERBUFFER,\n                    msaaRenderBuffer\n                );\n\n                gl.renderbufferStorageMultisample(\n                    gl.RENDERBUFFER,\n                    4,\n                    glInternalFormat,\n                    source.pixelWidth,\n                    source.pixelHeight\n                );\n\n                gl.framebufferRenderbuffer(\n                    gl.FRAMEBUFFER,\n                    gl.COLOR_ATTACHMENT0 + i,\n                    gl.RENDERBUFFER,\n                    msaaRenderBuffer\n                );\n            });\n        }\n    }\n\n    private _initStencil(glRenderTarget: GlRenderTarget)\n    {\n        // this already exists on the default screen\n        if (glRenderTarget.framebuffer === null) return;\n\n        const gl = this._renderer.gl;\n\n        const depthStencilRenderBuffer = gl.createRenderbuffer();\n\n        glRenderTarget.depthStencilRenderBuffer = depthStencilRenderBuffer;\n\n        gl.bindRenderbuffer(\n            gl.RENDERBUFFER,\n            depthStencilRenderBuffer\n        );\n\n        gl.framebufferRenderbuffer(\n            gl.FRAMEBUFFER,\n            gl.DEPTH_STENCIL_ATTACHMENT,\n            gl.RENDERBUFFER,\n            depthStencilRenderBuffer\n        );\n\n        // TDO DO>>\n        this._resizeStencil(glRenderTarget);\n    }\n\n    private _resizeStencil(glRenderTarget: GlRenderTarget)\n    {\n        const gl = this._renderer.gl;\n\n        gl.bindRenderbuffer(\n            gl.RENDERBUFFER,\n            glRenderTarget.depthStencilRenderBuffer\n        );\n\n        if (glRenderTarget.msaa)\n        {\n            gl.renderbufferStorageMultisample(\n                gl.RENDERBUFFER,\n                4,\n                gl.DEPTH24_STENCIL8,\n                glRenderTarget.width,\n                glRenderTarget.height\n            );\n        }\n        else\n        {\n            gl.renderbufferStorage(\n                gl.RENDERBUFFER,\n                this._renderer.context.webGLVersion === 2\n                    ? gl.DEPTH24_STENCIL8\n                    : gl.DEPTH_STENCIL,\n                glRenderTarget.width,\n                glRenderTarget.height\n            );\n        }\n    }\n\n    public prerender(renderTarget: RenderTarget)\n    {\n        const resource = renderTarget.colorTexture.resource;\n\n        // if the render target is a canvas, ensure its size matches the source\n        if (this._renderer.context.multiView && CanvasSource.test(resource))\n        {\n            this._renderer.context.ensureCanvasSize(resource);\n        }\n    }\n\n    public postrender(renderTarget: RenderTarget)\n    {\n        // if multiView is not enabled, we don't need to do anything\n        if (!this._renderer.context.multiView) return;\n\n        // if the render target is a canvas, we need to copy the pixels from the gl canvas\n        // to the canvas target\n        if (CanvasSource.test(renderTarget.colorTexture.resource))\n        {\n            const contextCanvas = this._renderer.context.canvas;\n            const canvasSource = renderTarget.colorTexture as unknown as CanvasSource;\n\n            canvasSource.context2D.drawImage(\n                contextCanvas as CanvasImageSource,\n                0, canvasSource.pixelHeight - contextCanvas.height\n            );\n        }\n    }\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { RenderTargetSystem } from '../../shared/renderTarget/RenderTargetSystem';\nimport { GlRenderTargetAdaptor } from './GlRenderTargetAdaptor';\n\nimport type { GlRenderTarget } from '../GlRenderTarget';\nimport type { WebGLRenderer } from '../WebGLRenderer';\n\n/**\n * The WebGL adaptor for the render target system. Allows the Render Target System to be used with the WebGl renderer\n * @category rendering\n * @advanced\n */\nexport class GlRenderTargetSystem extends RenderTargetSystem<GlRenderTarget>\n{\n    /** @ignore */\n    public static extension = {\n        type: [ExtensionType.WebGLSystem],\n        name: 'renderTarget',\n    } as const;\n\n    public adaptor = new GlRenderTargetAdaptor();\n\n    constructor(renderer: WebGLRenderer)\n    {\n        super(renderer);\n\n        this.adaptor.init(renderer, this);\n    }\n}\n","/** @private */\nexport class IGLUniformData\n{\n    public location: WebGLUniformLocation;\n    public value: number | boolean | Float32Array | Int32Array | Uint32Array | boolean[];\n}\n\n/**\n * Helper class to create a WebGL Program\n * @private\n */\nexport class GlProgramData\n{\n    /** The shader program. */\n    public program: WebGLProgram;\n\n    /**\n     * Holds the uniform data which contains uniform locations\n     * and current uniform values used for caching and preventing unneeded GPU commands.\n     */\n    public uniformData: Record<string, any>;\n\n    /**\n     * UniformGroups holds the various upload functions for the shader. Each uniform group\n     * and program have a unique upload function generated.\n     */\n    public uniformGroups: Record<string, any>;\n\n    /** A hash that stores where UBOs are bound to on the program. */\n    public uniformBlockBindings: Record<string, any>;\n\n    /** A hash for lazily-generated uniform uploading functions. */\n    public uniformSync: Record<string, any>;\n\n    /**\n     * A place where dirty ticks are stored for groups\n     * If a tick here does not match with the Higher level Programs tick, it means\n     * we should re upload the data.\n     */\n    public uniformDirtyGroups: Record<string, any>;\n\n    /**\n     * Makes a new Pixi program.\n     * @param program - webgl program\n     * @param uniformData - uniforms\n     */\n    constructor(program: WebGLProgram, uniformData: {[key: string]: IGLUniformData})\n    {\n        this.program = program;\n        this.uniformData = uniformData;\n        this.uniformGroups = {};\n        this.uniformDirtyGroups = {};\n        this.uniformBlockBindings = {};\n    }\n\n    /** Destroys this program. */\n    public destroy(): void\n    {\n        this.uniformData = null;\n        this.uniformGroups = null;\n        this.uniformDirtyGroups = null;\n        this.uniformBlockBindings = null;\n        this.program = null;\n    }\n}\n","/**\n * @private\n * @param {WebGLRenderingContext} gl - The current WebGL context {WebGLProgram}\n * @param {number} type - the type, can be either VERTEX_SHADER or FRAGMENT_SHADER\n * @param {string} src - The vertex shader source as an array of strings.\n * @returns {WebGLShader} the shader\n */\nexport function compileShader(gl: WebGLRenderingContextBase, type: number, src: string): WebGLShader\n{\n    const shader = gl.createShader(type);\n\n    gl.shaderSource(shader, src);\n    gl.compileShader(shader);\n\n    return shader;\n}\n","function booleanArray(size: number): Array<boolean>\n{\n    const array = new Array(size);\n\n    for (let i = 0; i < array.length; i++)\n    {\n        array[i] = false;\n    }\n\n    return array;\n}\n\n/**\n * @param {string} type - Type of value\n * @param {number} size\n * @private\n */\nexport function defaultValue(\n    type: string,\n    size: number\n): number | Float32Array | Int32Array | Uint32Array | boolean | boolean[]\n{\n    switch (type)\n    {\n        case 'float':\n            return 0;\n\n        case 'vec2':\n            return new Float32Array(2 * size);\n\n        case 'vec3':\n            return new Float32Array(3 * size);\n\n        case 'vec4':\n            return new Float32Array(4 * size);\n\n        case 'int':\n        case 'uint':\n        case 'sampler2D':\n        case 'sampler2DArray':\n            return 0;\n\n        case 'ivec2':\n            return new Int32Array(2 * size);\n\n        case 'ivec3':\n            return new Int32Array(3 * size);\n\n        case 'ivec4':\n            return new Int32Array(4 * size);\n\n        case 'uvec2':\n            return new Uint32Array(2 * size);\n\n        case 'uvec3':\n            return new Uint32Array(3 * size);\n\n        case 'uvec4':\n            return new Uint32Array(4 * size);\n\n        case 'bool':\n            return false;\n\n        case 'bvec2':\n\n            return booleanArray(2 * size);\n\n        case 'bvec3':\n            return booleanArray(3 * size);\n\n        case 'bvec4':\n            return booleanArray(4 * size);\n\n        case 'mat2':\n            return new Float32Array([1, 0,\n                0, 1]);\n\n        case 'mat3':\n            return new Float32Array([1, 0, 0,\n                0, 1, 0,\n                0, 0, 1]);\n\n        case 'mat4':\n            return new Float32Array([1, 0, 0, 0,\n                0, 1, 0, 0,\n                0, 0, 1, 0,\n                0, 0, 0, 1]);\n    }\n\n    return null;\n}\n","import type { Dict } from '../../../../../utils/types';\nimport type { VertexFormat } from '../../../shared/geometry/const';\n\nlet GL_TABLE: Dict<string> = null;\n\nconst GL_TO_GLSL_TYPES: Dict<string> = {\n    FLOAT:       'float',\n    FLOAT_VEC2:  'vec2',\n    FLOAT_VEC3:  'vec3',\n    FLOAT_VEC4:  'vec4',\n\n    INT:         'int',\n    INT_VEC2:    'ivec2',\n    INT_VEC3:    'ivec3',\n    INT_VEC4:    'ivec4',\n\n    UNSIGNED_INT:         'uint',\n    UNSIGNED_INT_VEC2:    'uvec2',\n    UNSIGNED_INT_VEC3:    'uvec3',\n    UNSIGNED_INT_VEC4:    'uvec4',\n\n    BOOL:        'bool',\n    BOOL_VEC2:   'bvec2',\n    BOOL_VEC3:   'bvec3',\n    BOOL_VEC4:   'bvec4',\n\n    FLOAT_MAT2:  'mat2',\n    FLOAT_MAT3:  'mat3',\n    FLOAT_MAT4:  'mat4',\n\n    SAMPLER_2D:              'sampler2D',\n    INT_SAMPLER_2D:          'sampler2D',\n    UNSIGNED_INT_SAMPLER_2D: 'sampler2D',\n    SAMPLER_CUBE:              'samplerCube',\n    INT_SAMPLER_CUBE:          'samplerCube',\n    UNSIGNED_INT_SAMPLER_CUBE: 'samplerCube',\n    SAMPLER_2D_ARRAY:              'sampler2DArray',\n    INT_SAMPLER_2D_ARRAY:          'sampler2DArray',\n    UNSIGNED_INT_SAMPLER_2D_ARRAY: 'sampler2DArray',\n};\n\nconst GLSL_TO_VERTEX_TYPES: Record<string, VertexFormat> = {\n\n    float: 'float32',\n    vec2: 'float32x2',\n    vec3: 'float32x3',\n    vec4: 'float32x4',\n\n    int: 'sint32',\n    ivec2: 'sint32x2',\n    ivec3: 'sint32x3',\n    ivec4: 'sint32x4',\n\n    uint: 'uint32',\n    uvec2: 'uint32x2',\n    uvec3: 'uint32x3',\n    uvec4: 'uint32x4',\n\n    bool: 'uint32',\n    bvec2: 'uint32x2',\n    bvec3: 'uint32x3',\n    bvec4: 'uint32x4',\n};\n\n/**\n * @param gl\n * @param type\n * @internal\n */\nexport function mapType(gl: any, type: number): string\n{\n    if (!GL_TABLE)\n    {\n        const typeNames = Object.keys(GL_TO_GLSL_TYPES);\n\n        GL_TABLE = {};\n\n        for (let i = 0; i < typeNames.length; ++i)\n        {\n            const tn = typeNames[i];\n\n            GL_TABLE[gl[tn]] = GL_TO_GLSL_TYPES[tn];\n        }\n    }\n\n    return GL_TABLE[type];\n}\n\n/**\n * @param gl\n * @param type\n * @internal\n */\nexport function mapGlToVertexFormat(gl: any, type: number): VertexFormat\n{\n    const typeValue = mapType(gl, type);\n\n    return GLSL_TO_VERTEX_TYPES[typeValue] || 'float32';\n}\n","/**\n * will log a shader error highlighting the lines with the error\n * also will add numbers along the side.\n * @param gl - the WebGLContext\n * @param shader - the shader to log errors for\n */\nfunction logPrettyShaderError(gl: WebGLRenderingContext, shader: WebGLShader): void\n{\n    const shaderSrc = gl.getShaderSource(shader)\n        .split('\\n')\n        .map((line, index) => `${index}: ${line}`);\n\n    const shaderLog = gl.getShaderInfoLog(shader);\n    const splitShader = shaderLog.split('\\n');\n\n    const dedupe: Record<number, boolean> = {};\n\n    const lineNumbers = splitShader.map((line) => parseFloat(line.replace(/^ERROR\\: 0\\:([\\d]+)\\:.*$/, '$1')))\n        .filter((n) =>\n        {\n            if (n && !dedupe[n])\n            {\n                dedupe[n] = true;\n\n                return true;\n            }\n\n            return false;\n        });\n\n    const logArgs = [''];\n\n    lineNumbers.forEach((number) =>\n    {\n        shaderSrc[number - 1] = `%c${shaderSrc[number - 1]}%c`;\n        logArgs.push('background: #FF0000; color:#FFFFFF; font-size: 10px', 'font-size: 10px');\n    });\n\n    const fragmentSourceToLog = shaderSrc\n        .join('\\n');\n\n    logArgs[0] = fragmentSourceToLog;\n\n    console.error(shaderLog);\n\n    // eslint-disable-next-line no-console\n    console.groupCollapsed('click to view full shader code');\n    console.warn(...logArgs);\n    // eslint-disable-next-line no-console\n    console.groupEnd();\n}\n\n/**\n *\n * logs out any program errors\n * @param gl - The current WebGL context\n * @param program - the WebGL program to display errors for\n * @param vertexShader  - the fragment WebGL shader program\n * @param fragmentShader - the vertex WebGL shader program\n * @private\n */\nexport function logProgramError(\n    gl: WebGLRenderingContext,\n    program: WebGLProgram,\n    vertexShader: WebGLShader,\n    fragmentShader: WebGLShader\n): void\n{\n    // if linking fails, then log and cleanup\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS))\n    {\n        if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS))\n        {\n            logPrettyShaderError(gl, vertexShader);\n        }\n\n        if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS))\n        {\n            logPrettyShaderError(gl, fragmentShader);\n        }\n\n        console.error('PixiJS Error: Could not initialize shader.');\n\n        // if there is a program info log, log it\n        if (gl.getProgramInfoLog(program) !== '')\n        {\n            console.warn('PixiJS Warning: gl.getProgramInfoLog()', gl.getProgramInfoLog(program));\n        }\n    }\n}\n","import { warn } from '../../../../../utils/logging/warn';\nimport { GlProgramData } from '../GlProgramData';\nimport { compileShader } from './compileShader';\nimport { defaultValue } from './defaultValue';\nimport { extractAttributesFromGlProgram } from './extractAttributesFromGlProgram';\nimport { getUboData } from './getUboData';\nimport { getUniformData } from './getUniformData';\nimport { logProgramError } from './logProgramError';\n\nimport type { GlRenderingContext } from '../../context/GlRenderingContext';\nimport type { GlProgram } from '../GlProgram';\nimport type { IGLUniformData } from '../GlProgramData';\n\n/**\n * generates a WebGL Program object from a high level Pixi Program.\n * @param gl - a rendering context on which to generate the program\n * @param program - the high level Pixi Program.\n * @private\n */\nexport function generateProgram(gl: GlRenderingContext, program: GlProgram): GlProgramData\n{\n    const glVertShader = compileShader(gl, gl.VERTEX_SHADER, program.vertex);\n    const glFragShader = compileShader(gl, gl.FRAGMENT_SHADER, program.fragment);\n\n    const webGLProgram = gl.createProgram();\n\n    gl.attachShader(webGLProgram, glVertShader);\n    gl.attachShader(webGLProgram, glFragShader);\n\n    const transformFeedbackVaryings = program.transformFeedbackVaryings;\n\n    if (transformFeedbackVaryings)\n    {\n        if (typeof gl.transformFeedbackVaryings !== 'function')\n        {\n            // #if _DEBUG\n            warn(`TransformFeedback is not supported but TransformFeedbackVaryings are given.`);\n            // #endif\n        }\n        else\n        {\n            gl.transformFeedbackVaryings(\n                webGLProgram,\n                transformFeedbackVaryings.names,\n                transformFeedbackVaryings.bufferMode === 'separate'\n                    ? gl.SEPARATE_ATTRIBS\n                    : gl.INTERLEAVED_ATTRIBS\n            );\n        }\n    }\n\n    gl.linkProgram(webGLProgram);\n\n    if (!gl.getProgramParameter(webGLProgram, gl.LINK_STATUS))\n    {\n        logProgramError(gl, webGLProgram, glVertShader, glFragShader);\n    }\n\n    // GLSL 1.00: bind attributes sorted by name in ascending order\n    // GLSL 3.00: don't change the attribute locations that where chosen by the compiler\n    //            or assigned by the layout specifier in the shader source code\n    program._attributeData = extractAttributesFromGlProgram(\n        webGLProgram,\n        gl,\n        !(/^[ \\t]*#[ \\t]*version[ \\t]+300[ \\t]+es[ \\t]*$/m).test(program.vertex)\n    );\n\n    program._uniformData = getUniformData(webGLProgram, gl);\n    program._uniformBlockData = getUboData(webGLProgram, gl);\n\n    gl.deleteShader(glVertShader);\n    gl.deleteShader(glFragShader);\n\n    const uniformData: {[key: string]: IGLUniformData} = {};\n\n    for (const i in program._uniformData)\n    {\n        const data = program._uniformData[i];\n\n        uniformData[i] = {\n            location: gl.getUniformLocation(webGLProgram, i),\n            value: defaultValue(data.type, data.size),\n        };\n    }\n\n    const glProgram = new GlProgramData(webGLProgram, uniformData);\n\n    return glProgram;\n}\n","import { getAttributeInfoFromFormat } from '../../../shared/geometry/utils/getAttributeInfoFromFormat';\nimport { mapGlToVertexFormat } from './mapType';\n\nimport type { Attribute } from '../../../shared/geometry/Geometry';\n\n/**\n * This interface represents the extracted attribute data from a WebGL program.\n * It extends the `Attribute` interface but omits the `buffer` property.\n * It includes an optional `location` property that indicates where the shader location is for this attribute.\n * @category rendering\n * @advanced\n */\nexport interface ExtractedAttributeData extends Omit<Attribute, 'buffer'>\n{\n    /** set where the shader location is for this attribute */\n    location?: number;\n}\n\n/**\n * returns the attribute data from the program\n * @private\n * @param {WebGLProgram} [program] - the WebGL program\n * @param {WebGLRenderingContext} [gl] - the WebGL context\n * @param sortAttributes\n * @returns {object} the attribute data for this program\n */\nexport function extractAttributesFromGlProgram(\n    program: WebGLProgram,\n    gl: WebGLRenderingContextBase,\n    sortAttributes = false\n): Record<string, ExtractedAttributeData>\n{\n    const attributes: {[key: string]: ExtractedAttributeData} = {};\n\n    const totalAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n\n    for (let i = 0; i < totalAttributes; i++)\n    {\n        const attribData = gl.getActiveAttrib(program, i);\n\n        // ignore the default ones!\n        if (attribData.name.startsWith('gl_'))\n        {\n            continue;\n        }\n\n        const format = mapGlToVertexFormat(gl, attribData.type);\n\n        attributes[attribData.name] = {\n            location: 0, // set further down..\n            format,\n            stride: getAttributeInfoFromFormat(format).stride,\n            offset: 0,\n            instance: false,\n            start: 0,\n        };\n    }\n\n    const keys = Object.keys(attributes);\n\n    if (sortAttributes)\n    {\n        keys.sort((a, b) => (a > b) ? 1 : -1); // eslint-disable-line no-confusing-arrow\n\n        for (let i = 0; i < keys.length; i++)\n        {\n            attributes[keys[i]].location = i;\n\n            gl.bindAttribLocation(program, i, keys[i]);\n        }\n\n        gl.linkProgram(program);\n    }\n    else\n    {\n        for (let i = 0; i < keys.length; i++)\n        {\n            attributes[keys[i]].location = gl.getAttribLocation(program, keys[i]);\n        }\n    }\n\n    return attributes;\n}\n","import { defaultValue } from './defaultValue';\nimport { mapType } from './mapType';\n\nimport type { GlUniformData } from '../GlProgram';\n\n/**\n * returns the uniform data from the program\n * @private\n * @param program - the webgl program\n * @param gl - the WebGL context\n * @returns {object} the uniform data for this program\n */\nexport function getUniformData(program: WebGLProgram, gl: WebGLRenderingContextBase): {[key: string]: GlUniformData}\n{\n    const uniforms: {[key: string]: GlUniformData} = {};\n\n    const totalUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n\n    for (let i = 0; i < totalUniforms; i++)\n    {\n        const uniformData = gl.getActiveUniform(program, i);\n        const name = uniformData.name.replace(/\\[.*?\\]$/, '');\n\n        const isArray = !!(uniformData.name.match(/\\[.*?\\]$/));\n\n        const type = mapType(gl, uniformData.type);\n\n        uniforms[name] = {\n            name,\n            index: i,\n            type,\n            size: uniformData.size,\n            isArray,\n            value: defaultValue(type, uniformData.size),\n        };\n    }\n\n    return uniforms;\n}\n","import type { GlUniformBlockData } from '../GlProgram';\n\n/**\n * returns the uniform block data from the program\n * @private\n * @param program - the webgl program\n * @param gl - the WebGL context\n * @returns {object} the uniform data for this program\n */\nexport function getUboData(program: WebGLProgram, gl: WebGL2RenderingContext): Record<string, GlUniformBlockData>\n{\n    // if uniform buffer data is not supported, early out\n    if (!gl.ACTIVE_UNIFORM_BLOCKS) return {};\n\n    const uniformBlocks: Record<string, GlUniformBlockData> = {};\n\n    // const totalUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n\n    const totalUniformsBlocks = gl.getProgramParameter(program, gl.ACTIVE_UNIFORM_BLOCKS);\n\n    for (let i = 0; i < totalUniformsBlocks; i++)\n    {\n        const name = gl.getActiveUniformBlockName(program, i);\n        const uniformBlockIndex = gl.getUniformBlockIndex(program, name);\n\n        const size = gl.getActiveUniformBlockParameter(program, i, gl.UNIFORM_BLOCK_DATA_SIZE);\n\n        uniformBlocks[name] = {\n            name,\n            index: uniformBlockIndex,\n            size,\n        };\n    }\n\n    return uniformBlocks;\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { generateShaderSyncCode } from './GenerateShaderSyncCode';\nimport { generateProgram } from './program/generateProgram';\n\nimport type { BufferResource } from '../../shared/buffer/BufferResource';\nimport type { Shader } from '../../shared/shader/Shader';\nimport type { UniformGroup } from '../../shared/shader/UniformGroup';\nimport type { GlRenderingContext } from '../context/GlRenderingContext';\nimport type { WebGLRenderer } from '../WebGLRenderer';\nimport type { GlProgram } from './GlProgram';\nimport type { GlProgramData } from './GlProgramData';\n\n/** @internal */\nexport interface ShaderSyncData\n{\n    textureCount: number;\n    blockIndex: number;\n}\n\n/** @internal */\nexport type ShaderSyncFunction = (renderer: WebGLRenderer, shader: Shader, syncData: ShaderSyncData) => void;\n\n// default sync data so we don't create a new one each time!\nconst defaultSyncData: ShaderSyncData = {\n    textureCount: 0,\n    blockIndex: 0,\n};\n\n/**\n * System plugin to the renderer to manage the shaders for WebGL.\n * @category rendering\n * @advanced\n */\nexport class GlShaderSystem\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'shader',\n    } as const;\n\n    /** @internal */\n    public _activeProgram: GlProgram = null;\n\n    private _programDataHash: Record<string, GlProgramData> = Object.create(null);\n    private readonly _renderer: WebGLRenderer;\n    /** @internal */\n    public _gl: WebGL2RenderingContext;\n    private _shaderSyncFunctions: Record<string, ShaderSyncFunction> = Object.create(null);\n\n    constructor(renderer: WebGLRenderer)\n    {\n        this._renderer = renderer;\n        this._renderer.renderableGC.addManagedHash(this, '_programDataHash');\n    }\n\n    protected contextChange(gl: GlRenderingContext): void\n    {\n        this._gl = gl;\n\n        this._programDataHash = Object.create(null);\n        /**\n         * these need to also be cleared as internally some uniforms are set as an optimisation as the sync\n         * function is generated. Specifically the texture ints.\n         */\n        this._shaderSyncFunctions = Object.create(null);\n        this._activeProgram = null;\n    }\n\n    /**\n     * Changes the current shader to the one given in parameter.\n     * @param shader - the new shader\n     * @param skipSync - false if the shader should automatically sync its uniforms.\n     * @returns the glProgram that belongs to the shader.\n     */\n    public bind(shader: Shader, skipSync?: boolean): void\n    {\n        this._setProgram(shader.glProgram);\n\n        if (skipSync) return;\n\n        defaultSyncData.textureCount = 0;\n        defaultSyncData.blockIndex = 0;\n\n        let syncFunction = this._shaderSyncFunctions[shader.glProgram._key];\n\n        if (!syncFunction)\n        {\n            syncFunction = this._shaderSyncFunctions[shader.glProgram._key] = this._generateShaderSync(shader, this);\n        }\n\n        // TODO: take into account number of TF buffers. Currently works only with interleaved\n        this._renderer.buffer.nextBindBase(!!shader.glProgram.transformFeedbackVaryings);\n        syncFunction(this._renderer, shader, defaultSyncData);\n    }\n\n    /**\n     * Updates the uniform group.\n     * @param uniformGroup - the uniform group to update\n     */\n    public updateUniformGroup(uniformGroup: UniformGroup): void\n    {\n        this._renderer.uniformGroup.updateUniformGroup(uniformGroup, this._activeProgram, defaultSyncData);\n    }\n\n    /**\n     * Binds a uniform block to the shader.\n     * @param uniformGroup - the uniform group to bind\n     * @param name - the name of the uniform block\n     * @param index - the index of the uniform block\n     */\n    public bindUniformBlock(uniformGroup: UniformGroup | BufferResource, name: string, index = 0): void\n    {\n        const bufferSystem = this._renderer.buffer;\n        const programData = this._getProgramData(this._activeProgram);\n\n        const isBufferResource = (uniformGroup as BufferResource)._bufferResource;\n\n        if (!isBufferResource)\n        {\n            this._renderer.ubo.updateUniformGroup(uniformGroup as UniformGroup);\n        }\n\n        const buffer = uniformGroup.buffer;\n\n        const glBuffer = bufferSystem.updateBuffer(buffer);\n\n        const boundLocation = bufferSystem.freeLocationForBufferBase(glBuffer);\n\n        if (isBufferResource)\n        {\n            const { offset, size } = (uniformGroup as BufferResource);\n\n            // trivial case of buffer resource, can be cached\n            if (offset === 0 && size === buffer.data.byteLength)\n            {\n                bufferSystem.bindBufferBase(glBuffer, boundLocation);\n            }\n            else\n            {\n                bufferSystem.bindBufferRange(glBuffer, boundLocation, offset);\n            }\n        }\n        else if (bufferSystem.getLastBindBaseLocation(glBuffer) !== boundLocation)\n        {\n            // confirmation that buffer isn't there yet\n            bufferSystem.bindBufferBase(glBuffer, boundLocation);\n        }\n\n        const uniformBlockIndex = this._activeProgram._uniformBlockData[name].index;\n\n        if (programData.uniformBlockBindings[index] === boundLocation) return;\n        programData.uniformBlockBindings[index] = boundLocation;\n\n        this._renderer.gl.uniformBlockBinding(programData.program, uniformBlockIndex, boundLocation);\n    }\n\n    private _setProgram(program: GlProgram)\n    {\n        if (this._activeProgram === program) return;\n\n        this._activeProgram = program;\n\n        const programData = this._getProgramData(program);\n\n        this._gl.useProgram(programData.program);\n    }\n\n    /**\n     * @param program - the program to get the data for\n     * @internal\n     */\n    public _getProgramData(program: GlProgram): GlProgramData\n    {\n        return this._programDataHash[program._key] || this._createProgramData(program);\n    }\n\n    private _createProgramData(program: GlProgram): GlProgramData\n    {\n        const key = program._key;\n\n        this._programDataHash[key] = generateProgram(this._gl, program);\n\n        return this._programDataHash[key];\n    }\n\n    public destroy(): void\n    {\n        for (const key of Object.keys(this._programDataHash))\n        {\n            const programData = this._programDataHash[key];\n\n            programData.destroy();\n            this._programDataHash[key] = null;\n        }\n\n        this._programDataHash = null;\n    }\n\n    /**\n     * Creates a function that can be executed that will sync the shader as efficiently as possible.\n     * Overridden by the unsafe eval package if you don't want eval used in your project.\n     * @param shader - the shader to generate the sync function for\n     * @param shaderSystem - the shader system to use\n     * @returns - the generated sync function\n     * @ignore\n     */\n    public _generateShaderSync(shader: Shader, shaderSystem: GlShaderSystem): ShaderSyncFunction\n    {\n        return generateShaderSyncCode(shader, shaderSystem);\n    }\n\n    public resetState(): void\n    {\n        this._activeProgram = null;\n    }\n}\n","import { BufferResource } from '../../shared/buffer/BufferResource';\nimport { UniformGroup } from '../../shared/shader/UniformGroup';\nimport { TextureSource } from '../../shared/texture/sources/TextureSource';\n\nimport type { Shader } from '../../shared/shader/Shader';\nimport type { GlShaderSystem, ShaderSyncFunction } from './GlShaderSystem';\n\n/**\n * Generates the a function that will efficiently sync shader resources with the GPU.\n * @param shader - The shader to generate the code for\n * @param shaderSystem - An instance of the shader system\n * @internal\n */\nexport function generateShaderSyncCode(shader: Shader, shaderSystem: GlShaderSystem): ShaderSyncFunction\n{\n    const funcFragments: string[] = [];\n\n    /**\n     * rS = renderer.shader\n     * sS = shaderSystem\n     * sD = shaderData\n     * g = shader.groups\n     * s = shader\n     * r = renderer\n     * ugS = renderer.uniformGroupSystem\n     */\n    const headerFragments: string[] = [`\n        var g = s.groups;\n        var sS = r.shader;\n        var p = s.glProgram;\n        var ugS = r.uniformGroup;\n        var resources;\n    `];\n\n    let addedTextreSystem = false;\n    let textureCount = 0;\n\n    const programData = shaderSystem._getProgramData(shader.glProgram);\n\n    for (const i in shader.groups)\n    {\n        const group = shader.groups[i];\n\n        funcFragments.push(`\n            resources = g[${i}].resources;\n        `);\n\n        for (const j in group.resources)\n        {\n            const resource = group.resources[j];\n\n            if (resource instanceof UniformGroup)\n            {\n                if (resource.ubo)\n                {\n                    const resName = shader._uniformBindMap[i][Number(j)];\n\n                    funcFragments.push(`\n                        sS.bindUniformBlock(\n                            resources[${j}],\n                            '${resName}',\n                            ${shader.glProgram._uniformBlockData[resName].index}\n                        );\n                    `);\n                }\n                else\n                {\n                    funcFragments.push(`\n                        ugS.updateUniformGroup(resources[${j}], p, sD);\n                    `);\n                }\n            }\n            else if (resource instanceof BufferResource)\n            {\n                const resName = shader._uniformBindMap[i][Number(j)];\n\n                funcFragments.push(`\n                    sS.bindUniformBlock(\n                        resources[${j}],\n                        '${resName}',\n                        ${shader.glProgram._uniformBlockData[resName].index}\n                    );\n                `);\n            }\n            else if (resource instanceof TextureSource)\n            {\n                const uniformName = shader._uniformBindMap[i as unknown as number][j as unknown as number];\n\n                const uniformData = programData.uniformData[uniformName];\n\n                if (uniformData)\n                {\n                    if (!addedTextreSystem)\n                    {\n                        addedTextreSystem = true;\n                        headerFragments.push(`\n                        var tS = r.texture;\n                        `);\n                    }\n\n                    shaderSystem._gl.uniform1i(uniformData.location, textureCount);\n\n                    funcFragments.push(`\n                        tS.bind(resources[${j}], ${textureCount});\n                    `);\n\n                    textureCount++;\n                }\n            }\n        }\n    }\n\n    const functionSource = [...headerFragments, ...funcFragments].join('\\n');\n\n    // eslint-disable-next-line no-new-func\n    return new Function('r', 's', 'sD', functionSource) as ShaderSyncFunction;\n}\n","// cu = Cached value's uniform data field\n// cv = Cached value\n// v = value to upload\n// ud = uniformData\n// uv = uniformValue\n\nimport type { UNIFORM_TYPES } from '../../../shared/shader/types';\n\n/** @internal */\nexport const UNIFORM_TO_SINGLE_SETTERS: Record<UNIFORM_TYPES | string, string> = {\n    f32: `if (cv !== v) {\n            cu.value = v;\n            gl.uniform1f(location, v);\n        }`,\n    'vec2<f32>': `if (cv[0] !== v[0] || cv[1] !== v[1]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2f(location, v[0], v[1]);\n        }`,\n    'vec3<f32>': `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3f(location, v[0], v[1], v[2]);\n        }`,\n    'vec4<f32>': `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4f(location, v[0], v[1], v[2], v[3]);\n        }`,\n    i32: `if (cv !== v) {\n            cu.value = v;\n            gl.uniform1i(location, v);\n        }`,\n    'vec2<i32>': `if (cv[0] !== v[0] || cv[1] !== v[1]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2i(location, v[0], v[1]);\n        }`,\n    'vec3<i32>': `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3i(location, v[0], v[1], v[2]);\n        }`,\n    'vec4<i32>': `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4i(location, v[0], v[1], v[2], v[3]);\n        }`,\n    u32: `if (cv !== v) {\n            cu.value = v;\n            gl.uniform1ui(location, v);\n        }`,\n    'vec2<u32>': `if (cv[0] !== v[0] || cv[1] !== v[1]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2ui(location, v[0], v[1]);\n        }`,\n    'vec3<u32>': `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3ui(location, v[0], v[1], v[2]);\n        }`,\n    'vec4<u32>': `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4ui(location, v[0], v[1], v[2], v[3]);\n        }`,\n    bool: `if (cv !== v) {\n            cu.value = v;\n            gl.uniform1i(location, v);\n        }`,\n    'vec2<bool>': `if (cv[0] !== v[0] || cv[1] !== v[1]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2i(location, v[0], v[1]);\n        }`,\n    'vec3<bool>': `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3i(location, v[0], v[1], v[2]);\n        }`,\n    'vec4<bool>': `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4i(location, v[0], v[1], v[2], v[3]);\n        }`,\n    'mat2x2<f32>': `gl.uniformMatrix2fv(location, false, v);`,\n    'mat3x3<f32>': `gl.uniformMatrix3fv(location, false, v);`,\n    'mat4x4<f32>': `gl.uniformMatrix4fv(location, false, v);`,\n};\n\n/** @internal */\nexport const UNIFORM_TO_ARRAY_SETTERS: Record<UNIFORM_TYPES | string, string> = {\n    f32: `gl.uniform1fv(location, v);`,\n    'vec2<f32>': `gl.uniform2fv(location, v);`,\n    'vec3<f32>': `gl.uniform3fv(location, v);`,\n    'vec4<f32>': `gl.uniform4fv(location, v);`,\n    'mat2x2<f32>': `gl.uniformMatrix2fv(location, false, v);`,\n    'mat3x3<f32>': `gl.uniformMatrix3fv(location, false, v);`,\n    'mat4x4<f32>': `gl.uniformMatrix4fv(location, false, v);`,\n    i32: `gl.uniform1iv(location, v);`,\n    'vec2<i32>': `gl.uniform2iv(location, v);`,\n    'vec3<i32>': `gl.uniform3iv(location, v);`,\n    'vec4<i32>': `gl.uniform4iv(location, v);`,\n    u32: `gl.uniform1iv(location, v);`,\n    'vec2<u32>': `gl.uniform2iv(location, v);`,\n    'vec3<u32>': `gl.uniform3iv(location, v);`,\n    'vec4<u32>': `gl.uniform4iv(location, v);`,\n    bool: `gl.uniform1iv(location, v);`,\n    'vec2<bool>': `gl.uniform2iv(location, v);`,\n    'vec3<bool>': `gl.uniform3iv(location, v);`,\n    'vec4<bool>': `gl.uniform4iv(location, v);`,\n};\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { generateUniformsSync } from './utils/generateUniformsSync';\n\nimport type { UniformsSyncCallback } from '../../shared/shader/types';\nimport type { UniformGroup } from '../../shared/shader/UniformGroup';\nimport type { System } from '../../shared/system/System';\nimport type { GlRenderingContext } from '../context/GlRenderingContext';\nimport type { WebGLRenderer } from '../WebGLRenderer';\nimport type { GlProgram, GlUniformData } from './GlProgram';\n\n/**\n * System plugin to the renderer to manage shaders.\n * @category rendering\n * @advanced\n */\nexport class GlUniformGroupSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'uniformGroup',\n    } as const;\n\n    /**\n     * The current WebGL rendering context.\n     * @type {WebGLRenderingContext}\n     */\n    protected gl: GlRenderingContext;\n\n    /** Cache to holds the generated functions. Stored against UniformObjects unique signature. */\n    private _cache: Record<string, UniformsSyncCallback> = {};\n    private _renderer: WebGLRenderer;\n\n    private _uniformGroupSyncHash: Record<string, Record<string, UniformsSyncCallback>> = {};\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: WebGLRenderer)\n    {\n        this._renderer = renderer;\n\n        this.gl = null;\n        this._cache = {};\n    }\n\n    protected contextChange(gl: GlRenderingContext): void\n    {\n        this.gl = gl;\n    }\n\n    /**\n     * Uploads the uniforms values to the currently bound shader.\n     * @param group - the uniforms values that be applied to the current shader\n     * @param program\n     * @param syncData\n     * @param syncData.textureCount\n     */\n    public updateUniformGroup(group: UniformGroup, program: GlProgram, syncData: { textureCount: number }): void\n    {\n        const programData = this._renderer.shader._getProgramData(program);\n\n        if (!group.isStatic || group._dirtyId !== programData.uniformDirtyGroups[group.uid])\n        {\n            programData.uniformDirtyGroups[group.uid] = group._dirtyId;\n\n            const syncFunc = this._getUniformSyncFunction(group, program);\n\n            syncFunc(programData.uniformData, group.uniforms, this._renderer, syncData);\n        }\n    }\n\n    /**\n     * Overridable by the pixi.js/unsafe-eval package to use static syncUniforms instead.\n     * @param group\n     * @param program\n     */\n    private _getUniformSyncFunction(group: UniformGroup, program: GlProgram): UniformsSyncCallback\n    {\n        return this._uniformGroupSyncHash[group._signature]?.[program._key]\n            || this._createUniformSyncFunction(group, program);\n    }\n\n    private _createUniformSyncFunction(group: UniformGroup, program: GlProgram): UniformsSyncCallback\n    {\n        const uniformGroupSyncHash = this._uniformGroupSyncHash[group._signature]\n            || (this._uniformGroupSyncHash[group._signature] = {});\n\n        const id = this._getSignature(group, program._uniformData, 'u');\n\n        if (!this._cache[id])\n        {\n            this._cache[id] = this._generateUniformsSync(group, program._uniformData);\n        }\n\n        uniformGroupSyncHash[program._key] = this._cache[id];\n\n        return uniformGroupSyncHash[program._key];\n    }\n\n    private _generateUniformsSync(group: UniformGroup, uniformData: Record<string, GlUniformData>): UniformsSyncCallback\n    {\n        return generateUniformsSync(group, uniformData);\n    }\n\n    /**\n     * Takes a uniform group and data and generates a unique signature for them.\n     * @param group - The uniform group to get signature of\n     * @param group.uniforms\n     * @param uniformData - Uniform information generated by the shader\n     * @param preFix\n     * @returns Unique signature of the uniform group\n     */\n    private _getSignature(group: UniformGroup, uniformData: Record<string, any>, preFix: string): string\n    {\n        const uniforms = group.uniforms;\n\n        const strings = [`${preFix}-`];\n\n        for (const i in uniforms)\n        {\n            strings.push(i);\n\n            if (uniformData[i])\n            {\n                strings.push(uniformData[i].type);\n            }\n        }\n\n        return strings.join('-');\n    }\n\n    /** Destroys this System and removes all its textures. */\n    public destroy(): void\n    {\n        this._renderer = null;\n        this._cache = null;\n    }\n}\n","// cu = Cached value's uniform data field\n// cv = Cached value\n// v = value to upload\n// ud = uniformData\n// uv = uniformValue\n\nimport { BufferResource } from '../../../shared/buffer/BufferResource';\nimport { UniformGroup } from '../../../shared/shader/UniformGroup';\nimport { uniformParsers } from '../../../shared/shader/utils/uniformParsers';\nimport { UNIFORM_TO_ARRAY_SETTERS, UNIFORM_TO_SINGLE_SETTERS } from './generateUniformsSyncTypes';\n\nimport type { UniformsSyncCallback } from '../../../shared/shader/types';\n\n/**\n * @param group\n * @param uniformData\n * @internal\n */\nexport function generateUniformsSync(group: UniformGroup, uniformData: Record<string, any>): UniformsSyncCallback\n{\n    const funcFragments = [`\n        var v = null;\n        var cv = null;\n        var cu = null;\n        var t = 0;\n        var gl = renderer.gl;\n        var name = null;\n    `];\n\n    for (const i in group.uniforms)\n    {\n        if (!uniformData[i])\n        {\n            if (group.uniforms[i] instanceof UniformGroup)\n            {\n                if ((group.uniforms[i] as UniformGroup).ubo)\n                {\n                    funcFragments.push(`\n                        renderer.shader.bindUniformBlock(uv.${i}, \"${i}\");\n                    `);\n                }\n                else\n                {\n                    funcFragments.push(`\n                        renderer.shader.updateUniformGroup(uv.${i});\n                    `);\n                }\n            }\n            else if (group.uniforms[i] instanceof BufferResource)\n            {\n                funcFragments.push(`\n                        renderer.shader.bindBufferResource(uv.${i}, \"${i}\");\n                    `);\n            }\n\n            continue;\n        }\n\n        const uniform = group.uniformStructures[i];\n\n        let parsed = false;\n\n        for (let j = 0; j < uniformParsers.length; j++)\n        {\n            const parser = uniformParsers[j];\n\n            if (uniform.type === parser.type && parser.test(uniform))\n            {\n                funcFragments.push(`name = \"${i}\";`, uniformParsers[j].uniform);\n                parsed = true;\n\n                break;\n            }\n        }\n\n        if (!parsed)\n        {\n            const templateType = uniform.size === 1 ? UNIFORM_TO_SINGLE_SETTERS : UNIFORM_TO_ARRAY_SETTERS;\n\n            const template = templateType[uniform.type].replace('location', `ud[\"${i}\"].location`);\n\n            funcFragments.push(`\n            cu = ud[\"${i}\"];\n            cv = cu.value;\n            v = uv[\"${i}\"];\n            ${template};`);\n        }\n    }\n\n    /*\n     * the introduction of syncData is to solve an issue where textures in uniform groups are not set correctly\n     * the texture count was always starting from 0 in each group. This needs to increment each time a texture is used\n     * no matter which group is being used\n     *\n     */\n    // eslint-disable-next-line no-new-func\n    return new Function('ud', 'uv', 'renderer', 'syncData', funcFragments.join('\\n')) as UniformsSyncCallback;\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { type RenderTarget } from '../../shared/renderTarget/RenderTarget';\nimport { State } from '../../shared/state/State';\nimport { type WebGLRenderer } from '../WebGLRenderer';\nimport { mapWebGLBlendModesToPixi } from './mapWebGLBlendModesToPixi';\n\nimport type { BLEND_MODES } from '../../shared/state/const';\nimport type { System } from '../../shared/system/System';\nimport type { GlRenderingContext } from '../context/GlRenderingContext';\n\nconst BLEND = 0;\nconst OFFSET = 1;\nconst CULLING = 2;\nconst DEPTH_TEST = 3;\nconst WINDING = 4;\nconst DEPTH_MASK = 5;\n\n/**\n * System plugin to the renderer to manage WebGL state machines\n * @category rendering\n * @advanced\n */\nexport class GlStateSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'state',\n    } as const;\n\n    /**\n     * State ID\n     * @readonly\n     */\n    public stateId: number;\n\n    /**\n     * Polygon offset\n     * @readonly\n     */\n    public polygonOffset: number;\n\n    /**\n     * Blend mode\n     * @default 'none'\n     * @readonly\n     */\n    public blendMode: BLEND_MODES;\n\n    /** Whether current blend equation is different */\n    protected _blendEq: boolean;\n\n    /**\n     * GL context\n     * @type {WebGLRenderingContext}\n     * @readonly\n     */\n    protected gl: GlRenderingContext;\n\n    protected blendModesMap: Record<BLEND_MODES, number[]>;\n\n    /**\n     * Collection of calls\n     * @type {Function[]}\n     */\n    protected readonly map: ((value: boolean) => void)[];\n\n    /**\n     * Collection of check calls\n     * @type {Function[]}\n     */\n    protected readonly checks: ((system: this, state: State) => void)[];\n\n    /**\n     * Default WebGL State\n     * @readonly\n     */\n    protected defaultState: State;\n\n    /**\n     * Whether to invert the front face when rendering\n     * This is used for render textures where the Y-coordinate is flipped\n     * @default false\n     */\n    private _invertFrontFace: boolean = false;\n    private _glFrontFace: boolean;\n    private _cullFace: boolean;\n    private _frontFaceDirty: boolean;\n    private _frontFace: boolean;\n\n    constructor(renderer: WebGLRenderer)\n    {\n        this.gl = null;\n\n        this.stateId = 0;\n        this.polygonOffset = 0;\n        this.blendMode = 'none';\n\n        this._blendEq = false;\n\n        // map functions for when we set state..\n        this.map = [];\n        this.map[BLEND] = this.setBlend;\n        this.map[OFFSET] = this.setOffset;\n        this.map[CULLING] = this.setCullFace;\n        this.map[DEPTH_TEST] = this.setDepthTest;\n        this.map[WINDING] = this.setFrontFace;\n        this.map[DEPTH_MASK] = this.setDepthMask;\n\n        this.checks = [];\n\n        this.defaultState = State.for2d();\n\n        // listen for when the renderTarget changes\n        // as rendering to textures means we need to invert the front face\n        renderer.renderTarget.onRenderTargetChange.add(this);\n    }\n\n    protected onRenderTargetChange(renderTarget: RenderTarget)\n    {\n        this._invertFrontFace = !renderTarget.isRoot;\n\n        // mini optimization to avoid setting the front face if culling is disabled\n        if (this._cullFace)\n        {\n            // need to set the front face to the requested value as it matters because of the culling is active!\n            this.setFrontFace(this._frontFace);\n        }\n        else\n        {\n            // if culling is disabled, we need to set the front face dirty\n            this._frontFaceDirty = true;\n        }\n    }\n\n    protected contextChange(gl: GlRenderingContext): void\n    {\n        this.gl = gl;\n\n        this.blendModesMap = mapWebGLBlendModesToPixi(gl);\n\n        // Reset face culling variables\n\n        this.resetState();\n    }\n\n    /**\n     * Sets the current state\n     * @param {*} state - The state to set.\n     */\n    public set(state: State): void\n    {\n        state ||= this.defaultState;\n\n        // TODO maybe to an object check? ( this.state === state )?\n        if (this.stateId !== state.data)\n        {\n            let diff = this.stateId ^ state.data;\n            let i = 0;\n\n            // order from least to most common\n            while (diff)\n            {\n                if (diff & 1)\n                {\n                    // state change!\n                    this.map[i].call(this, !!(state.data & (1 << i)));\n                }\n\n                diff >>= 1;\n                i++;\n            }\n\n            this.stateId = state.data;\n        }\n\n        // based on the above settings we check for specific modes..\n        // for example if blend is active we check and set the blend modes\n        // or of polygon offset is active we check the poly depth.\n        for (let i = 0; i < this.checks.length; i++)\n        {\n            this.checks[i](this, state);\n        }\n    }\n\n    /**\n     * Sets the state, when previous state is unknown.\n     * @param {*} state - The state to set\n     */\n    public forceState(state: State): void\n    {\n        state ||= this.defaultState;\n        for (let i = 0; i < this.map.length; i++)\n        {\n            this.map[i].call(this, !!(state.data & (1 << i)));\n        }\n        for (let i = 0; i < this.checks.length; i++)\n        {\n            this.checks[i](this, state);\n        }\n\n        this.stateId = state.data;\n    }\n\n    /**\n     * Sets whether to enable or disable blending.\n     * @param value - Turn on or off WebGl blending.\n     */\n    public setBlend(value: boolean): void\n    {\n        this._updateCheck(GlStateSystem._checkBlendMode, value);\n\n        this.gl[value ? 'enable' : 'disable'](this.gl.BLEND);\n    }\n\n    /**\n     * Sets whether to enable or disable polygon offset fill.\n     * @param value - Turn on or off webgl polygon offset testing.\n     */\n    public setOffset(value: boolean): void\n    {\n        this._updateCheck(GlStateSystem._checkPolygonOffset, value);\n\n        this.gl[value ? 'enable' : 'disable'](this.gl.POLYGON_OFFSET_FILL);\n    }\n\n    /**\n     * Sets whether to enable or disable depth test.\n     * @param value - Turn on or off webgl depth testing.\n     */\n    public setDepthTest(value: boolean): void\n    {\n        this.gl[value ? 'enable' : 'disable'](this.gl.DEPTH_TEST);\n    }\n\n    /**\n     * Sets whether to enable or disable depth mask.\n     * @param value - Turn on or off webgl depth mask.\n     */\n    public setDepthMask(value: boolean): void\n    {\n        this.gl.depthMask(value);\n    }\n\n    /**\n     * Sets whether to enable or disable cull face.\n     * @param {boolean} value - Turn on or off webgl cull face.\n     */\n    public setCullFace(value: boolean): void\n    {\n        this._cullFace = value;\n        this.gl[value ? 'enable' : 'disable'](this.gl.CULL_FACE);\n\n        if (this._cullFace && this._frontFaceDirty)\n        {\n            // need to set the front face to the requested value as it matters because of the culling is active!\n            this.setFrontFace(this._frontFace);\n        }\n    }\n\n    /**\n     * Sets the gl front face.\n     * @param {boolean} value - true is clockwise and false is counter-clockwise\n     */\n    public setFrontFace(value: boolean): void\n    {\n        this._frontFace = value;\n        this._frontFaceDirty = false;\n        // If invertFrontFace is true, we invert the face direction\n        const faceMode = this._invertFrontFace ? !value : value;\n\n        if (this._glFrontFace !== faceMode)\n        {\n            this._glFrontFace = faceMode;\n            this.gl.frontFace(this.gl[faceMode ? 'CW' : 'CCW']);\n        }\n    }\n\n    /**\n     * Sets the blend mode.\n     * @param {number} value - The blend mode to set to.\n     */\n    public setBlendMode(value: BLEND_MODES): void\n    {\n        if (!this.blendModesMap[value])\n        {\n            value = 'normal';\n        }\n\n        if (value === this.blendMode)\n        {\n            return;\n        }\n\n        this.blendMode = value;\n\n        const mode = this.blendModesMap[value];\n        const gl = this.gl;\n\n        if (mode.length === 2)\n        {\n            gl.blendFunc(mode[0], mode[1]);\n        }\n        else\n        {\n            gl.blendFuncSeparate(mode[0], mode[1], mode[2], mode[3]);\n        }\n\n        if (mode.length === 6)\n        {\n            this._blendEq = true;\n            gl.blendEquationSeparate(mode[4], mode[5]);\n        }\n        else if (this._blendEq)\n        {\n            this._blendEq = false;\n            gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n        }\n    }\n\n    /**\n     * Sets the polygon offset.\n     * @param {number} value - the polygon offset\n     * @param {number} scale - the polygon offset scale\n     */\n    public setPolygonOffset(value: number, scale: number): void\n    {\n        this.gl.polygonOffset(value, scale);\n    }\n\n    /** Resets all the logic and disables the VAOs. */\n    public resetState(): void\n    {\n        this._glFrontFace = false;\n        this._frontFace = false;\n        this._cullFace = false;\n        this._frontFaceDirty = false;\n        this._invertFrontFace = false;\n\n        this.gl.frontFace(this.gl.CCW);\n        this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, false);\n\n        this.forceState(this.defaultState);\n\n        this._blendEq = true;\n        // setting to '' means the blend mode will be set as soon as we set the first blend mode when rendering!\n        this.blendMode = '' as BLEND_MODES;\n        this.setBlendMode('normal');\n    }\n\n    /**\n     * Checks to see which updates should be checked based on which settings have been activated.\n     *\n     * For example, if blend is enabled then we should check the blend modes each time the state is changed\n     * or if polygon fill is activated then we need to check if the polygon offset changes.\n     * The idea is that we only check what we have too.\n     * @param func - the checking function to add or remove\n     * @param value - should the check function be added or removed.\n     */\n    private _updateCheck(func: (system: this, state: State) => void, value: boolean): void\n    {\n        const index = this.checks.indexOf(func);\n\n        if (value && index === -1)\n        {\n            this.checks.push(func);\n        }\n        else if (!value && index !== -1)\n        {\n            this.checks.splice(index, 1);\n        }\n    }\n\n    /**\n     * A private little wrapper function that we call to check the blend mode.\n     * @param system - the System to perform the state check on\n     * @param state - the state that the blendMode will pulled from\n     */\n    private static _checkBlendMode(system: GlStateSystem, state: State): void\n    {\n        system.setBlendMode(state.blendMode);\n    }\n\n    /**\n     * A private little wrapper function that we call to check the polygon offset.\n     * @param system - the System to perform the state check on\n     * @param state - the state that the blendMode will pulled from\n     */\n    private static _checkPolygonOffset(system: GlStateSystem, state: State): void\n    {\n        system.setPolygonOffset(1, state.polygonOffset);\n    }\n\n    /** @ignore */\n    public destroy(): void\n    {\n        this.gl = null;\n        this.checks.length = 0;\n    }\n}\n","import { DOMAdapter } from '../../../../environment/adapter';\n\nimport type { BLEND_MODES } from '../../shared/state/const';\nimport type { GlRenderingContext } from '../context/GlRenderingContext';\n\n/**\n * Maps gl blend combinations to WebGL.\n * @param gl\n * @returns {object} Map of gl blend combinations to WebGL.\n * @internal\n */\nexport function mapWebGLBlendModesToPixi(gl: GlRenderingContext): Record<BLEND_MODES, number[]>\n{\n    const blendMap: Partial<Record<BLEND_MODES, number[]>> = {};\n\n    // TODO - premultiply alpha would be different.\n    // add a boolean for that!\n    blendMap.normal = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    blendMap.add = [gl.ONE, gl.ONE];\n    blendMap.multiply = [gl.DST_COLOR, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    blendMap.screen = [gl.ONE, gl.ONE_MINUS_SRC_COLOR, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    blendMap.none = [0, 0];\n\n    // not-premultiplied blend modes\n    blendMap['normal-npm'] = [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    blendMap['add-npm'] = [gl.SRC_ALPHA, gl.ONE, gl.ONE, gl.ONE];\n    blendMap['screen-npm'] = [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_COLOR, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n\n    blendMap.erase = [gl.ZERO, gl.ONE_MINUS_SRC_ALPHA];\n\n    const isWebGl2 = !(gl instanceof DOMAdapter.get().getWebGLRenderingContext());\n\n    if (isWebGl2)\n    {\n        blendMap.min = [gl.ONE, gl.ONE, gl.ONE, gl.ONE, gl.MIN, gl.MIN];\n        blendMap.max = [gl.ONE, gl.ONE, gl.ONE, gl.ONE, gl.MAX, gl.MAX];\n    }\n    else\n    {\n        const ext = gl.getExtension('EXT_blend_minmax');\n\n        if (ext)\n        {\n            blendMap.min = [gl.ONE, gl.ONE, gl.ONE, gl.ONE, ext.MIN_EXT, ext.MIN_EXT];\n            blendMap.max = [gl.ONE, gl.ONE, gl.ONE, gl.ONE, ext.MAX_EXT, ext.MAX_EXT];\n        }\n    }\n\n    // TODO - implement if requested!\n    // composite operations\n    // array[BLEND_MODES.SRC_IN] = [gl.DST_ALPHA, gl.ZERO];\n    // array[BLEND_MODES.SRC_OUT] = [gl.ONE_MINUS_DST_ALPHA, gl.ZERO];\n    // array[BLEND_MODES.SRC_ATOP] = [gl.DST_ALPHA, gl.ONE_MINUS_SRC_ALPHA];\n    // array[BLEND_MODES.DST_OVER] = [gl.ONE_MINUS_DST_ALPHA, gl.ONE];\n    // array[BLEND_MODES.DST_IN] = [gl.ZERO, gl.SRC_ALPHA];\n    // array[BLEND_MODES.DST_OUT] = [gl.ZERO, gl.ONE_MINUS_SRC_ALPHA];\n    // array[BLEND_MODES.DST_ATOP] = [gl.ONE_MINUS_DST_ALPHA, gl.SRC_ALPHA];\n    // array[BLEND_MODES.XOR] = [gl.ONE_MINUS_DST_ALPHA, gl.ONE_MINUS_SRC_ALPHA];\n    // SUBTRACT from flash\n    // array[BLEND_MODES.SUBTRACT] = [gl.ONE, gl.ONE, gl.ONE, gl.ONE, gl.FUNC_REVERSE_SUBTRACT, gl.FUNC_ADD];\n\n    return blendMap as Record<BLEND_MODES, number[]>;\n}\n","import { GL_FORMATS, GL_TARGETS, GL_TYPES } from './const';\n\n/**\n * Internal texture for WebGL context\n * @category rendering\n * @ignore\n */\nexport class GlTexture\n{\n    public target: GL_TARGETS = GL_TARGETS.TEXTURE_2D;\n\n    /** The WebGL texture. */\n    public texture: WebGLTexture;\n\n    /** Width of texture that was used in texImage2D. */\n    public width: number;\n\n    /** Height of texture that was used in texImage2D. */\n    public height: number;\n\n    /** Whether mip levels has to be generated. */\n    public mipmap: boolean;\n\n    /** Type copied from texture source. */\n    public type: number;\n\n    /** Type copied from texture source. */\n    public internalFormat: number;\n\n    /** Type of sampler corresponding to this texture. See {@link SAMPLER_TYPES} */\n    public samplerType: number;\n\n    public format: GL_FORMATS;\n\n    constructor(texture: WebGLTexture)\n    {\n        this.texture = texture;\n        this.width = -1;\n        this.height = -1;\n        this.type = GL_TYPES.UNSIGNED_BYTE;\n        this.internalFormat = GL_FORMATS.RGBA;\n        this.format = GL_FORMATS.RGBA;\n        this.samplerType = 0;\n    }\n}\n","import type { TextureSource } from '../../../shared/texture/sources/TextureSource';\nimport type { GlRenderingContext } from '../../context/GlRenderingContext';\nimport type { GlTexture } from '../GlTexture';\nimport type { GLTextureUploader } from './GLTextureUploader';\n\n/** @internal */\nexport const glUploadBufferImageResource = {\n\n    id: 'buffer',\n\n    upload(source: TextureSource, glTexture: GlTexture, gl: GlRenderingContext)\n    {\n        if (glTexture.width === source.width || glTexture.height === source.height)\n        {\n            gl.texSubImage2D(\n                gl.TEXTURE_2D,\n                0,\n                0,\n                0,\n                source.width,\n                source.height,\n                glTexture.format,\n                glTexture.type,\n                source.resource\n            );\n        }\n        else\n        {\n            gl.texImage2D(\n                glTexture.target,\n                0,\n                glTexture.internalFormat,\n                source.width,\n                source.height,\n                0,\n                glTexture.format,\n                glTexture.type,\n                source.resource\n            );\n        }\n\n        glTexture.width = source.width;\n        glTexture.height = source.height;\n    }\n} as GLTextureUploader;\n\n","import type { CompressedSource } from '../../../shared/texture/sources/CompressedSource';\nimport type { GlRenderingContext } from '../../context/GlRenderingContext';\nimport type { GlTexture } from '../GlTexture';\nimport type { GLTextureUploader } from './GLTextureUploader';\n\nconst compressedFormatMap: Record<string, boolean> = {\n    'bc1-rgba-unorm': true,\n    'bc1-rgba-unorm-srgb': true,\n    'bc2-rgba-unorm': true,\n    'bc2-rgba-unorm-srgb': true,\n    'bc3-rgba-unorm': true,\n    'bc3-rgba-unorm-srgb': true,\n    'bc4-r-unorm': true,\n    'bc4-r-snorm': true,\n    'bc5-rg-unorm': true,\n    'bc5-rg-snorm': true,\n    'bc6h-rgb-ufloat': true,\n    'bc6h-rgb-float': true,\n    'bc7-rgba-unorm': true,\n    'bc7-rgba-unorm-srgb': true,\n\n    // ETC2 compressed formats usable if \"texture-compression-etc2\" is both\n    // supported by the device/user agent and enabled in requestDevice.\n    'etc2-rgb8unorm': true,\n    'etc2-rgb8unorm-srgb': true,\n    'etc2-rgb8a1unorm': true,\n    'etc2-rgb8a1unorm-srgb': true,\n    'etc2-rgba8unorm': true,\n    'etc2-rgba8unorm-srgb': true,\n    'eac-r11unorm': true,\n    'eac-r11snorm': true,\n    'eac-rg11unorm': true,\n    'eac-rg11snorm': true,\n\n    // ASTC compressed formats usable if \"texture-compression-astc\" is both\n    // supported by the device/user agent and enabled in requestDevice.\n    'astc-4x4-unorm': true,\n    'astc-4x4-unorm-srgb': true,\n    'astc-5x4-unorm': true,\n    'astc-5x4-unorm-srgb': true,\n    'astc-5x5-unorm': true,\n    'astc-5x5-unorm-srgb': true,\n    'astc-6x5-unorm': true,\n    'astc-6x5-unorm-srgb': true,\n    'astc-6x6-unorm': true,\n    'astc-6x6-unorm-srgb': true,\n    'astc-8x5-unorm': true,\n    'astc-8x5-unorm-srgb': true,\n    'astc-8x6-unorm': true,\n    'astc-8x6-unorm-srgb': true,\n    'astc-8x8-unorm': true,\n    'astc-8x8-unorm-srgb': true,\n    'astc-10x5-unorm': true,\n    'astc-10x5-unorm-srgb': true,\n    'astc-10x6-unorm': true,\n    'astc-10x6-unorm-srgb': true,\n    'astc-10x8-unorm': true,\n    'astc-10x8-unorm-srgb': true,\n    'astc-10x10-unorm': true,\n    'astc-10x10-unorm-srgb': true,\n    'astc-12x10-unorm': true,\n    'astc-12x10-unorm-srgb': true,\n    'astc-12x12-unorm': true,\n    'astc-12x12-unorm-srgb': true,\n};\n\n/** @internal */\nexport const glUploadCompressedTextureResource = {\n\n    id: 'compressed',\n\n    upload(source: CompressedSource, glTexture: GlTexture, gl: GlRenderingContext)\n    {\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, 4);\n\n        let mipWidth = source.pixelWidth;\n        let mipHeight = source.pixelHeight;\n\n        const compressed = !!compressedFormatMap[source.format];\n\n        for (let i = 0; i < source.resource.length; i++)\n        {\n            const levelBuffer = source.resource[i];\n\n            if (compressed)\n            {\n                gl.compressedTexImage2D(\n                    gl.TEXTURE_2D, i, glTexture.internalFormat,\n                    mipWidth, mipHeight, 0,\n                    levelBuffer\n                );\n            }\n            else\n            {\n                gl.texImage2D(\n                    gl.TEXTURE_2D, i, glTexture.internalFormat,\n                    mipWidth, mipHeight, 0,\n                    glTexture.format, glTexture.type,\n                    levelBuffer);\n            }\n\n            mipWidth = Math.max(mipWidth >> 1, 1);\n            mipHeight = Math.max(mipHeight >> 1, 1);\n        }\n    }\n} as GLTextureUploader;\n\n","import type { CanvasSource } from '../../../shared/texture/sources/CanvasSource';\nimport type { ImageSource } from '../../../shared/texture/sources/ImageSource';\nimport type { GlRenderingContext } from '../../context/GlRenderingContext';\nimport type { GlTexture } from '../GlTexture';\nimport type { GLTextureUploader } from './GLTextureUploader';\n\n/** @internal */\nexport const glUploadImageResource = {\n\n    id: 'image',\n\n    upload(source: ImageSource | CanvasSource, glTexture: GlTexture, gl: GlRenderingContext, webGLVersion: number)\n    {\n        const glWidth = glTexture.width;\n        const glHeight = glTexture.height;\n\n        const textureWidth = source.pixelWidth;\n        const textureHeight = source.pixelHeight;\n\n        const resourceWidth = source.resourceWidth;\n        const resourceHeight = source.resourceHeight;\n\n        if (resourceWidth < textureWidth || resourceHeight < textureHeight)\n        {\n            if (glWidth !== textureWidth || glHeight !== textureHeight)\n            {\n                gl.texImage2D(\n                    glTexture.target,\n                    0,\n                    glTexture.internalFormat,\n                    textureWidth,\n                    textureHeight,\n                    0,\n                    glTexture.format,\n                    glTexture.type,\n                    null\n                );\n            }\n\n            if (webGLVersion === 2)\n            {\n                gl.texSubImage2D(\n                    gl.TEXTURE_2D,\n                    0,\n                    0,\n                    0,\n                    resourceWidth,\n                    resourceHeight,\n                    glTexture.format,\n                    glTexture.type,\n                    source.resource as TexImageSource\n                );\n            }\n            else\n            {\n                gl.texSubImage2D(\n                    gl.TEXTURE_2D,\n                    0,\n                    0,\n                    0,\n                    glTexture.format,\n                    glTexture.type,\n                    source.resource as TexImageSource\n                );\n            }\n        }\n        else if (glWidth === textureWidth && glHeight === textureHeight)\n        {\n            gl.texSubImage2D(\n                gl.TEXTURE_2D,\n                0,\n                0,\n                0,\n                glTexture.format,\n                glTexture.type,\n                source.resource as TexImageSource\n            );\n        }\n        else if (webGLVersion === 2)\n        {\n            gl.texImage2D(\n                glTexture.target,\n                0,\n                glTexture.internalFormat,\n                textureWidth,\n                textureHeight,\n                0,\n                glTexture.format,\n                glTexture.type,\n                source.resource as TexImageSource\n            );\n        }\n        else\n        {\n            gl.texImage2D(\n                glTexture.target,\n                0,\n                glTexture.internalFormat,\n                glTexture.format,\n                glTexture.type,\n                source.resource as TexImageSource\n            );\n        }\n\n        glTexture.width = textureWidth;\n        glTexture.height = textureHeight;\n    }\n} as GLTextureUploader;\n\n","import { glUploadImageResource } from './glUploadImageResource';\n\nimport type { VideoSource } from '../../../shared/texture/sources/VideoSource';\nimport type { GlRenderingContext } from '../../context/GlRenderingContext';\nimport type { GlTexture } from '../GlTexture';\nimport type { GLTextureUploader } from './GLTextureUploader';\n\n/** @internal */\nexport const glUploadVideoResource = {\n\n    id: 'video',\n\n    upload(source: VideoSource, glTexture: GlTexture, gl: GlRenderingContext, webGLVersion: number)\n    {\n        if (!source.isValid)\n        {\n            gl.texImage2D(\n                glTexture.target,\n                0,\n                glTexture.internalFormat,\n                1,\n                1,\n                0,\n                glTexture.format,\n                glTexture.type,\n                null\n            );\n\n            return;\n        }\n\n        glUploadImageResource.upload(source, glTexture, gl, webGLVersion);\n    }\n} as GLTextureUploader;\n\n","/** @internal */\nexport const scaleModeToGlFilter = {\n    linear: 9729,\n    nearest: 9728,\n};\n\n/** @internal */\nexport const mipmapScaleModeToGlFilter = {\n    linear: {\n        linear: 9987,\n        nearest: 9985,\n    },\n    nearest: {\n        linear: 9986,\n        nearest: 9984,\n    }\n};\n\n/** @internal */\nexport const wrapModeToGlAddress = {\n    'clamp-to-edge': 33071,\n    repeat: 10497,\n    'mirror-repeat': 33648,\n};\n\n/** @internal */\nexport const compareModeToGlCompare = {\n    never: 512,\n    less: 513,\n    equal: 514,\n    'less-equal': 515,\n    greater: 516,\n    'not-equal': 517,\n    'greater-equal': 518,\n    always: 519,\n};\n\n","import {\n    compareModeToGlCompare,\n    mipmapScaleModeToGlFilter,\n    scaleModeToGlFilter,\n    wrapModeToGlAddress\n} from './pixiToGlMaps';\n\nimport type { TextureStyle } from '../../../shared/texture/TextureStyle';\n\n/**\n * @param style\n * @param gl\n * @param mipmaps\n * @param anisotropicExt\n * @param glFunctionName\n * @param firstParam\n * @param forceClamp\n * @param firstCreation\n * @internal\n */\nexport function applyStyleParams(\n    style: TextureStyle,\n    gl: WebGL2RenderingContext,\n    mipmaps: boolean,\n    // eslint-disable-next-line camelcase\n    anisotropicExt: EXT_texture_filter_anisotropic,\n    glFunctionName: 'samplerParameteri' | 'texParameteri',\n    firstParam: 3553 | WebGLSampler,\n    forceClamp: boolean,\n    /** if true we can skip setting certain values if the values is the same as the default gl values */\n    firstCreation: boolean\n)\n{\n    const castParam = firstParam as 3553;\n\n    if (!firstCreation\n        || style.addressModeU !== 'repeat'\n        || style.addressModeV !== 'repeat'\n        || style.addressModeW !== 'repeat'\n    )\n    {\n        // 1. set the wrapping mode\n        const wrapModeS = wrapModeToGlAddress[forceClamp ? 'clamp-to-edge' : style.addressModeU];\n        const wrapModeT = wrapModeToGlAddress[forceClamp ? 'clamp-to-edge' : style.addressModeV];\n        const wrapModeR = wrapModeToGlAddress[forceClamp ? 'clamp-to-edge' : style.addressModeW];\n\n        gl[glFunctionName](castParam, gl.TEXTURE_WRAP_S, wrapModeS);\n        gl[glFunctionName](castParam, gl.TEXTURE_WRAP_T, wrapModeT);\n\n        // does not exist in webGL1\n        if (gl.TEXTURE_WRAP_R) gl[glFunctionName](castParam, gl.TEXTURE_WRAP_R, wrapModeR);\n    }\n\n    if (!firstCreation || style.magFilter !== 'linear')\n    {\n        // 2. set the filtering mode\n        gl[glFunctionName](castParam, gl.TEXTURE_MAG_FILTER, scaleModeToGlFilter[style.magFilter]);\n    }\n\n    // assuming the currently bound texture is the one we want to set the filter for\n    // the only smelly part of this code, WebGPU is much better here :P\n    if (mipmaps)\n    {\n        if (!firstCreation || style.mipmapFilter !== 'linear')\n        {\n            const glFilterMode = mipmapScaleModeToGlFilter[style.minFilter][style.mipmapFilter];\n\n            gl[glFunctionName](castParam, gl.TEXTURE_MIN_FILTER, glFilterMode);\n        }\n    }\n\n    else\n    {\n        gl[glFunctionName](castParam, gl.TEXTURE_MIN_FILTER, scaleModeToGlFilter[style.minFilter]);\n    }\n\n    // 3. set the anisotropy\n    if (anisotropicExt && style.maxAnisotropy > 1)\n    {\n        const level = Math.min(style.maxAnisotropy, gl.getParameter(anisotropicExt.MAX_TEXTURE_MAX_ANISOTROPY_EXT));\n\n        gl[glFunctionName](castParam, anisotropicExt.TEXTURE_MAX_ANISOTROPY_EXT, level);\n    }\n\n    // 4. set the compare mode\n    if (style.compare)\n    {\n        gl[glFunctionName](castParam, gl.TEXTURE_COMPARE_FUNC, compareModeToGlCompare[style.compare]);\n    }\n}\n","import { DOMAdapter } from '../../../../environment/adapter';\nimport { ExtensionType } from '../../../../extensions/Extensions';\nimport { Texture } from '../../shared/texture/Texture';\nimport { GlTexture } from './GlTexture';\nimport { glUploadBufferImageResource } from './uploaders/glUploadBufferImageResource';\nimport { glUploadCompressedTextureResource } from './uploaders/glUploadCompressedTextureResource';\nimport { glUploadImageResource } from './uploaders/glUploadImageResource';\nimport { glUploadVideoResource } from './uploaders/glUploadVideoResource';\nimport { applyStyleParams } from './utils/applyStyleParams';\nimport { mapFormatToGlFormat } from './utils/mapFormatToGlFormat';\nimport { mapFormatToGlInternalFormat } from './utils/mapFormatToGlInternalFormat';\nimport { mapFormatToGlType } from './utils/mapFormatToGlType';\nimport { unpremultiplyAlpha } from './utils/unpremultiplyAlpha';\n\nimport type { ICanvas } from '../../../../environment/canvas/ICanvas';\nimport type { System } from '../../shared/system/System';\nimport type { CanvasGenerator, GetPixelsOutput } from '../../shared/texture/GenerateCanvas';\nimport type { TextureSource } from '../../shared/texture/sources/TextureSource';\nimport type { BindableTexture } from '../../shared/texture/Texture';\nimport type { TextureStyle } from '../../shared/texture/TextureStyle';\nimport type { GlRenderingContext } from '../context/GlRenderingContext';\nimport type { WebGLRenderer } from '../WebGLRenderer';\nimport type { GLTextureUploader } from './uploaders/GLTextureUploader';\n\nconst BYTES_PER_PIXEL = 4;\n\n/**\n * The system for managing textures in WebGL.\n * @category rendering\n * @advanced\n */\nexport class GlTextureSystem implements System, CanvasGenerator\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'texture',\n    } as const;\n\n    public readonly managedTextures: TextureSource[] = [];\n\n    private readonly _renderer: WebGLRenderer;\n\n    private _glTextures: Record<number, GlTexture> = Object.create(null);\n    private _glSamplers: Record<string, WebGLSampler> = Object.create(null);\n\n    private _boundTextures: TextureSource[] = [];\n    private _activeTextureLocation = -1;\n\n    private _boundSamplers: Record<number, WebGLSampler> = Object.create(null);\n\n    private readonly _uploads: Record<string, GLTextureUploader> = {\n        image: glUploadImageResource,\n        buffer: glUploadBufferImageResource,\n        video: glUploadVideoResource,\n        compressed: glUploadCompressedTextureResource,\n    };\n\n    private _gl: GlRenderingContext;\n    private _mapFormatToInternalFormat: Record<string, number>;\n    private _mapFormatToType: Record<string, number>;\n    private _mapFormatToFormat: Record<string, number>;\n\n    private _premultiplyAlpha = false;\n\n    // TODO - separate samplers will be a cool thing to add, but not right now!\n    private readonly _useSeparateSamplers = false;\n\n    constructor(renderer: WebGLRenderer)\n    {\n        this._renderer = renderer;\n        this._renderer.renderableGC.addManagedHash(this, '_glTextures');\n        this._renderer.renderableGC.addManagedHash(this, '_glSamplers');\n    }\n\n    protected contextChange(gl: GlRenderingContext): void\n    {\n        this._gl = gl;\n\n        if (!this._mapFormatToInternalFormat)\n        {\n            this._mapFormatToInternalFormat = mapFormatToGlInternalFormat(gl, this._renderer.context.extensions);\n\n            this._mapFormatToType = mapFormatToGlType(gl);\n            this._mapFormatToFormat = mapFormatToGlFormat(gl);\n        }\n\n        this._glTextures = Object.create(null);\n        this._glSamplers = Object.create(null);\n        this._boundSamplers = Object.create(null);\n        this._premultiplyAlpha = false;\n\n        for (let i = 0; i < 16; i++)\n        {\n            this.bind(Texture.EMPTY, i);\n        }\n    }\n\n    public initSource(source: TextureSource)\n    {\n        this.bind(source);\n    }\n\n    public bind(texture: BindableTexture, location = 0)\n    {\n        const source = texture.source;\n\n        if (texture)\n        {\n            this.bindSource(source, location);\n\n            if (this._useSeparateSamplers)\n            {\n                this._bindSampler(source.style, location);\n            }\n        }\n        else\n        {\n            this.bindSource(null, location);\n\n            if (this._useSeparateSamplers)\n            {\n                this._bindSampler(null, location);\n            }\n        }\n    }\n\n    public bindSource(source: TextureSource, location = 0): void\n    {\n        const gl = this._gl;\n\n        source._touched = this._renderer.textureGC.count;\n\n        if (this._boundTextures[location] !== source)\n        {\n            this._boundTextures[location] = source;\n            this._activateLocation(location);\n\n            source ||= Texture.EMPTY.source;\n\n            // bind texture and source!\n            const glTexture = this.getGlSource(source);\n\n            gl.bindTexture(glTexture.target, glTexture.texture);\n        }\n    }\n\n    private _bindSampler(style: TextureStyle, location = 0): void\n    {\n        const gl = this._gl;\n\n        if (!style)\n        {\n            this._boundSamplers[location] = null;\n            gl.bindSampler(location, null);\n\n            return;\n        }\n\n        const sampler = this._getGlSampler(style);\n\n        if (this._boundSamplers[location] !== sampler)\n        {\n            this._boundSamplers[location] = sampler;\n            gl.bindSampler(location, sampler);\n        }\n    }\n\n    public unbind(texture: BindableTexture): void\n    {\n        const source = texture.source;\n        const boundTextures = this._boundTextures;\n        const gl = this._gl;\n\n        for (let i = 0; i < boundTextures.length; i++)\n        {\n            if (boundTextures[i] === source)\n            {\n                this._activateLocation(i);\n\n                const glTexture = this.getGlSource(source);\n\n                gl.bindTexture(glTexture.target, null);\n                boundTextures[i] = null;\n            }\n        }\n    }\n\n    private _activateLocation(location: number): void\n    {\n        if (this._activeTextureLocation !== location)\n        {\n            this._activeTextureLocation = location;\n            this._gl.activeTexture(this._gl.TEXTURE0 + location);\n        }\n    }\n\n    private _initSource(source: TextureSource): GlTexture\n    {\n        const gl = this._gl;\n\n        const glTexture = new GlTexture(gl.createTexture());\n\n        glTexture.type = this._mapFormatToType[source.format];\n        glTexture.internalFormat = this._mapFormatToInternalFormat[source.format];\n        glTexture.format = this._mapFormatToFormat[source.format];\n\n        if (source.autoGenerateMipmaps && (this._renderer.context.supports.nonPowOf2mipmaps || source.isPowerOfTwo))\n        {\n            const biggestDimension = Math.max(source.width, source.height);\n\n            source.mipLevelCount = Math.floor(Math.log2(biggestDimension)) + 1;\n        }\n\n        this._glTextures[source.uid] = glTexture;\n\n        if (!this.managedTextures.includes(source))\n        {\n            source.on('update', this.onSourceUpdate, this);\n            source.on('resize', this.onSourceUpdate, this);\n            source.on('styleChange', this.onStyleChange, this);\n            source.on('destroy', this.onSourceDestroy, this);\n            source.on('unload', this.onSourceUnload, this);\n            source.on('updateMipmaps', this.onUpdateMipmaps, this);\n\n            this.managedTextures.push(source);\n        }\n\n        this.onSourceUpdate(source);\n        this.updateStyle(source, false);\n\n        return glTexture;\n    }\n\n    protected onStyleChange(source: TextureSource): void\n    {\n        this.updateStyle(source, false);\n    }\n\n    protected updateStyle(source: TextureSource, firstCreation: boolean): void\n    {\n        const gl = this._gl;\n\n        const glTexture = this.getGlSource(source);\n\n        gl.bindTexture(gl.TEXTURE_2D, glTexture.texture);\n\n        this._boundTextures[this._activeTextureLocation] = source;\n\n        applyStyleParams(\n            source.style,\n            gl,\n            source.mipLevelCount > 1,\n            this._renderer.context.extensions.anisotropicFiltering,\n            'texParameteri',\n            gl.TEXTURE_2D,\n            // will force a clamp to edge if the texture is not a power of two\n            !this._renderer.context.supports.nonPowOf2wrapping && !source.isPowerOfTwo,\n            firstCreation,\n        );\n    }\n\n    protected onSourceUnload(source: TextureSource): void\n    {\n        const glTexture = this._glTextures[source.uid];\n\n        if (!glTexture) return;\n\n        this.unbind(source);\n        this._glTextures[source.uid] = null;\n\n        this._gl.deleteTexture(glTexture.texture);\n    }\n\n    protected onSourceUpdate(source: TextureSource): void\n    {\n        const gl = this._gl;\n\n        const glTexture = this.getGlSource(source);\n\n        gl.bindTexture(gl.TEXTURE_2D, glTexture.texture);\n\n        this._boundTextures[this._activeTextureLocation] = source;\n\n        const premultipliedAlpha = source.alphaMode === 'premultiply-alpha-on-upload';\n\n        if (this._premultiplyAlpha !== premultipliedAlpha)\n        {\n            this._premultiplyAlpha = premultipliedAlpha;\n            gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, premultipliedAlpha);\n        }\n\n        if (this._uploads[source.uploadMethodId])\n        {\n            this._uploads[source.uploadMethodId].upload(source, glTexture, gl, this._renderer.context.webGLVersion);\n        }\n        else\n        {\n            // eslint-disable-next-line max-len\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, source.pixelWidth, source.pixelHeight, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n        }\n\n        if (source.autoGenerateMipmaps && source.mipLevelCount > 1)\n        {\n            this.onUpdateMipmaps(source, false);\n        }\n    }\n\n    protected onUpdateMipmaps(source: TextureSource, bind = true): void\n    {\n        if (bind) this.bindSource(source, 0);\n\n        const glTexture = this.getGlSource(source);\n\n        this._gl.generateMipmap(glTexture.target);\n    }\n\n    protected onSourceDestroy(source: TextureSource): void\n    {\n        source.off('destroy', this.onSourceDestroy, this);\n        source.off('update', this.onSourceUpdate, this);\n        source.off('resize', this.onSourceUpdate, this);\n        source.off('unload', this.onSourceUnload, this);\n        source.off('styleChange', this.onStyleChange, this);\n        source.off('updateMipmaps', this.onUpdateMipmaps, this);\n\n        this.managedTextures.splice(this.managedTextures.indexOf(source), 1);\n\n        this.onSourceUnload(source);\n    }\n\n    private _initSampler(style: TextureStyle): WebGLSampler\n    {\n        const gl = this._gl;\n\n        const glSampler = this._gl.createSampler();\n\n        this._glSamplers[style._resourceId] = glSampler;\n\n        applyStyleParams(\n            style,\n            gl,\n            this._boundTextures[this._activeTextureLocation].mipLevelCount > 1,\n            this._renderer.context.extensions.anisotropicFiltering,\n            'samplerParameteri',\n            glSampler,\n            false,\n            true,\n        );\n\n        return this._glSamplers[style._resourceId];\n    }\n\n    private _getGlSampler(sampler: TextureStyle): WebGLSampler\n    {\n        return this._glSamplers[sampler._resourceId] || this._initSampler(sampler);\n    }\n\n    public getGlSource(source: TextureSource): GlTexture\n    {\n        return this._glTextures[source.uid] || this._initSource(source);\n    }\n\n    public generateCanvas(texture: Texture): ICanvas\n    {\n        const { pixels, width, height } = this.getPixels(texture);\n\n        const canvas = DOMAdapter.get().createCanvas();\n\n        canvas.width = width;\n        canvas.height = height;\n\n        const ctx = canvas.getContext('2d');\n\n        if (ctx)\n        {\n            const imageData = ctx.createImageData(width, height);\n\n            imageData.data.set(pixels);\n            ctx.putImageData(imageData, 0, 0);\n        }\n\n        return canvas;\n    }\n\n    public getPixels(texture: Texture): GetPixelsOutput\n    {\n        const resolution = texture.source.resolution;\n        const frame = texture.frame;\n\n        const width = Math.max(Math.round(frame.width * resolution), 1);\n        const height = Math.max(Math.round(frame.height * resolution), 1);\n        const pixels = new Uint8Array(BYTES_PER_PIXEL * width * height);\n\n        const renderer = this._renderer;\n\n        const renderTarget = renderer.renderTarget.getRenderTarget(texture);\n        const glRenterTarget = renderer.renderTarget.getGpuRenderTarget(renderTarget);\n\n        const gl = renderer.gl;\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, glRenterTarget.resolveTargetFramebuffer);\n\n        gl.readPixels(\n            Math.round(frame.x * resolution),\n            Math.round(frame.y * resolution),\n            width,\n            height,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            pixels\n        );\n\n        // if (texture.source.premultiplyAlpha > 0)\n        // TODO - premultiplied alpha does not exist right now, need to add that back in!\n        // eslint-disable-next-line no-constant-condition\n        if (false)\n        {\n            unpremultiplyAlpha(pixels);\n        }\n\n        return { pixels: new Uint8ClampedArray(pixels.buffer), width, height };\n    }\n\n    public destroy(): void\n    {\n        // we copy the array as the array with a slice as onSourceDestroy\n        // will remove the source from the real managedTextures array\n        this.managedTextures\n            .slice()\n            .forEach((source) => this.onSourceDestroy(source));\n\n        (this.managedTextures as null) = null;\n\n        (this._renderer as null) = null;\n    }\n\n    public resetState(): void\n    {\n        this._activeTextureLocation = -1;\n        this._boundTextures.fill(Texture.EMPTY.source);\n        this._boundSamplers = Object.create(null);\n\n        const gl = this._gl;\n\n        this._premultiplyAlpha = false;\n\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this._premultiplyAlpha);\n    }\n}\n\n","import { DOMAdapter } from '../../../../../environment/adapter';\n\nimport type { GlRenderingContext } from '../../context/GlRenderingContext';\nimport type { WebGLExtensions } from '../../context/WebGLExtensions';\n\n/**\n * Returns a lookup table that maps each type-format pair to a compatible internal format.\n * @function mapTypeAndFormatToInternalFormat\n * @private\n * @param gl - The rendering context.\n * @param extensions - The WebGL extensions.\n * @returns Lookup table.\n */\nexport function mapFormatToGlInternalFormat(\n    gl: GlRenderingContext,\n    extensions: WebGLExtensions,\n): Record<string, number>\n{\n    let srgb = {};\n    let bgra8unorm: number = gl.RGBA;\n\n    if (!(gl instanceof DOMAdapter.get().getWebGLRenderingContext()))\n    {\n        srgb = {\n            'rgba8unorm-srgb': gl.SRGB8_ALPHA8,\n            'bgra8unorm-srgb': gl.SRGB8_ALPHA8,\n        };\n\n        bgra8unorm = gl.RGBA8;\n    }\n    else if (extensions.srgb)\n    {\n        srgb = {\n            'rgba8unorm-srgb': extensions.srgb.SRGB8_ALPHA8_EXT,\n            'bgra8unorm-srgb': extensions.srgb.SRGB8_ALPHA8_EXT,\n        };\n    }\n\n    return {\n        // 8-bit formats\n        r8unorm: gl.R8,\n        r8snorm: gl.R8_SNORM,\n        r8uint: gl.R8UI,\n        r8sint: gl.R8I,\n\n        // 16-bit formats\n        r16uint: gl.R16UI,\n        r16sint: gl.R16I,\n        r16float: gl.R16F,\n        rg8unorm: gl.RG8,\n        rg8snorm: gl.RG8_SNORM,\n        rg8uint: gl.RG8UI,\n        rg8sint: gl.RG8I,\n\n        // 32-bit formats\n        r32uint: gl.R32UI,\n        r32sint: gl.R32I,\n        r32float: gl.R32F,\n        rg16uint: gl.RG16UI,\n        rg16sint: gl.RG16I,\n        rg16float: gl.RG16F,\n        rgba8unorm: gl.RGBA,\n\n        ...srgb,\n\n        // Packed 32-bit formats\n        rgba8snorm: gl.RGBA8_SNORM,\n        rgba8uint: gl.RGBA8UI,\n        rgba8sint: gl.RGBA8I,\n        bgra8unorm,\n        rgb9e5ufloat: gl.RGB9_E5,\n        rgb10a2unorm: gl.RGB10_A2,\n        rg11b10ufloat: gl.R11F_G11F_B10F,\n\n        // 64-bit formats\n        rg32uint: gl.RG32UI,\n        rg32sint: gl.RG32I,\n        rg32float: gl.RG32F,\n        rgba16uint: gl.RGBA16UI,\n        rgba16sint: gl.RGBA16I,\n        rgba16float: gl.RGBA16F,\n\n        // 128-bit formats\n        rgba32uint: gl.RGBA32UI,\n        rgba32sint: gl.RGBA32I,\n        rgba32float: gl.RGBA32F,\n\n        // Depth/stencil formats\n        stencil8: gl.STENCIL_INDEX8,\n        depth16unorm: gl.DEPTH_COMPONENT16,\n        depth24plus: gl.DEPTH_COMPONENT24,\n        'depth24plus-stencil8': gl.DEPTH24_STENCIL8,\n        depth32float: gl.DEPTH_COMPONENT32F,\n        'depth32float-stencil8': gl.DEPTH32F_STENCIL8,\n\n        // Compressed formats\n        ...extensions.s3tc ? {\n            'bc1-rgba-unorm': extensions.s3tc.COMPRESSED_RGBA_S3TC_DXT1_EXT,\n            'bc2-rgba-unorm': extensions.s3tc.COMPRESSED_RGBA_S3TC_DXT3_EXT,\n            'bc3-rgba-unorm': extensions.s3tc.COMPRESSED_RGBA_S3TC_DXT5_EXT,\n        } : {},\n        ...extensions.s3tc_sRGB ? {\n            'bc1-rgba-unorm-srgb': extensions.s3tc_sRGB.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT,\n            'bc2-rgba-unorm-srgb': extensions.s3tc_sRGB.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT,\n            'bc3-rgba-unorm-srgb': extensions.s3tc_sRGB.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT,\n        } : {},\n        ...extensions.rgtc ? {\n            'bc4-r-unorm': extensions.rgtc.COMPRESSED_RED_RGTC1_EXT,\n            'bc4-r-snorm': extensions.rgtc.COMPRESSED_SIGNED_RED_RGTC1_EXT,\n            'bc5-rg-unorm': extensions.rgtc.COMPRESSED_RED_GREEN_RGTC2_EXT,\n            'bc5-rg-snorm': extensions.rgtc.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT,\n        } : {},\n        ...extensions.bptc ? {\n            'bc6h-rgb-float': extensions.bptc.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT,\n            'bc6h-rgb-ufloat': extensions.bptc.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT,\n            'bc7-rgba-unorm': extensions.bptc.COMPRESSED_RGBA_BPTC_UNORM_EXT,\n            'bc7-rgba-unorm-srgb': extensions.bptc.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT,\n        } : {},\n        ...extensions.etc ? {\n            'etc2-rgb8unorm': extensions.etc.COMPRESSED_RGB8_ETC2,\n            'etc2-rgb8unorm-srgb': extensions.etc.COMPRESSED_SRGB8_ETC2,\n            'etc2-rgb8a1unorm': extensions.etc.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2,\n            'etc2-rgb8a1unorm-srgb': extensions.etc.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2,\n            'etc2-rgba8unorm': extensions.etc.COMPRESSED_RGBA8_ETC2_EAC,\n            'etc2-rgba8unorm-srgb': extensions.etc.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC,\n            'eac-r11unorm': extensions.etc.COMPRESSED_R11_EAC,\n            // 'eac-r11snorm'\n            'eac-rg11unorm': extensions.etc.COMPRESSED_SIGNED_RG11_EAC,\n            // 'eac-rg11snorm'\n        } : {},\n        ...extensions.astc ? {\n            'astc-4x4-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_4x4_KHR,\n            'astc-4x4-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR,\n            'astc-5x4-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_5x4_KHR,\n            'astc-5x4-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR,\n            'astc-5x5-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_5x5_KHR,\n            'astc-5x5-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR,\n            'astc-6x5-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_6x5_KHR,\n            'astc-6x5-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR,\n            'astc-6x6-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_6x6_KHR,\n            'astc-6x6-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR,\n            'astc-8x5-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_8x5_KHR,\n            'astc-8x5-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR,\n            'astc-8x6-unorm':   extensions.astc.COMPRESSED_RGBA_ASTC_8x6_KHR,\n            'astc-8x6-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR,\n            'astc-8x8-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_8x8_KHR,\n            'astc-8x8-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR,\n            'astc-10x5-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_10x5_KHR,\n            'astc-10x5-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR,\n            'astc-10x6-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_10x6_KHR,\n            'astc-10x6-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR,\n            'astc-10x8-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_10x8_KHR,\n            'astc-10x8-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR,\n            'astc-10x10-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_10x10_KHR,\n            'astc-10x10-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR,\n            'astc-12x10-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_12x10_KHR,\n            'astc-12x10-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR,\n            'astc-12x12-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_12x12_KHR,\n            'astc-12x12-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR,\n        } : {},\n    };\n}\n","import type { GlRenderingContext } from '../../context/GlRenderingContext';\n\n/**\n * Returns a lookup table that maps each type-format pair to a compatible internal format.\n * @function mapTypeAndFormatToInternalFormat\n * @private\n * @param {WebGLRenderingContext} gl - The rendering context.\n * @returns Lookup table.\n */\nexport function mapFormatToGlType(gl: GlRenderingContext): Record<string, number>\n{\n    return {\n        // 8-bit formats\n        r8unorm: gl.UNSIGNED_BYTE,\n        r8snorm: gl.BYTE,\n        r8uint: gl.UNSIGNED_BYTE,\n        r8sint: gl.BYTE,\n\n        // 16-bit formats\n        r16uint: gl.UNSIGNED_SHORT,\n        r16sint: gl.SHORT,\n        r16float: gl.HALF_FLOAT,\n        rg8unorm: gl.UNSIGNED_BYTE,\n        rg8snorm: gl.BYTE,\n        rg8uint: gl.UNSIGNED_BYTE,\n        rg8sint: gl.BYTE,\n\n        // 32-bit formats\n        r32uint: gl.UNSIGNED_INT,\n        r32sint: gl.INT,\n        r32float: gl.FLOAT,\n        rg16uint: gl.UNSIGNED_SHORT,\n        rg16sint: gl.SHORT,\n        rg16float: gl.HALF_FLOAT,\n        rgba8unorm: gl.UNSIGNED_BYTE,\n        'rgba8unorm-srgb': gl.UNSIGNED_BYTE,\n\n        // Packed 32-bit formats\n        rgba8snorm: gl.BYTE,\n        rgba8uint: gl.UNSIGNED_BYTE,\n        rgba8sint: gl.BYTE,\n        bgra8unorm: gl.UNSIGNED_BYTE,\n        'bgra8unorm-srgb': gl.UNSIGNED_BYTE,\n        rgb9e5ufloat: gl.UNSIGNED_INT_5_9_9_9_REV,\n        rgb10a2unorm: gl.UNSIGNED_INT_2_10_10_10_REV,\n        rg11b10ufloat: gl.UNSIGNED_INT_10F_11F_11F_REV,\n\n        // 64-bit formats\n        rg32uint: gl.UNSIGNED_INT,\n        rg32sint: gl.INT,\n        rg32float: gl.FLOAT,\n        rgba16uint: gl.UNSIGNED_SHORT,\n        rgba16sint: gl.SHORT,\n        rgba16float: gl.HALF_FLOAT,\n\n        // 128-bit formats\n        rgba32uint: gl.UNSIGNED_INT,\n        rgba32sint: gl.INT,\n        rgba32float: gl.FLOAT,\n\n        // Depth/stencil formats\n        stencil8: gl.UNSIGNED_BYTE,\n        depth16unorm: gl.UNSIGNED_SHORT,\n        depth24plus: gl.UNSIGNED_INT,\n        'depth24plus-stencil8': gl.UNSIGNED_INT_24_8,\n        depth32float: gl.FLOAT,\n        'depth32float-stencil8': gl.FLOAT_32_UNSIGNED_INT_24_8_REV,\n\n    };\n}\n","import type { GlRenderingContext } from '../../context/GlRenderingContext';\n\n/**\n * Returns a lookup table that maps each type-format pair to a compatible internal format.\n * @function mapTypeAndFormatToInternalFormat\n * @private\n * @param {WebGLRenderingContext} gl - The rendering context.\n * @returns Lookup table.\n */\nexport function mapFormatToGlFormat(gl: GlRenderingContext): Record<string, number>\n{\n    return {\n        // 8-bit formats\n        r8unorm: gl.RED,\n        r8snorm: gl.RED,\n        r8uint: gl.RED,\n        r8sint: gl.RED,\n\n        // 16-bit formats\n        r16uint: gl.RED,\n        r16sint:    gl.RED,\n        r16float: gl.RED,\n        rg8unorm:  gl.RG,\n        rg8snorm:   gl.RG,\n        rg8uint:  gl.RG,\n        rg8sint:  gl.RG,\n\n        // 32-bit formats\n        r32uint: gl.RED,\n        r32sint: gl.RED,\n        r32float: gl.RED,\n        rg16uint:   gl.RG,\n        rg16sint:  gl.RG,\n        rg16float:  gl.RG,\n        rgba8unorm: gl.RGBA,\n        'rgba8unorm-srgb': gl.RGBA,\n\n        // Packed 32-bit formats\n        rgba8snorm: gl.RGBA,\n        rgba8uint: gl.RGBA,\n        rgba8sint: gl.RGBA,\n        bgra8unorm: gl.RGBA,\n        'bgra8unorm-srgb': gl.RGBA,\n        rgb9e5ufloat: gl.RGB,\n        rgb10a2unorm: gl.RGBA,\n        rg11b10ufloat: gl.RGB,\n\n        // 64-bit formats\n        rg32uint: gl.RG,\n        rg32sint: gl.RG,\n        rg32float:  gl.RG,\n        rgba16uint: gl.RGBA,\n        rgba16sint: gl.RGBA,\n        rgba16float: gl.RGBA,\n\n        // 128-bit formats\n        rgba32uint: gl.RGBA,\n        rgba32sint: gl.RGBA,\n        rgba32float: gl.RGBA,\n\n        // Depth/stencil formats\n        stencil8: gl.STENCIL_INDEX8,\n        depth16unorm: gl.DEPTH_COMPONENT,\n        depth24plus: gl.DEPTH_COMPONENT,\n        'depth24plus-stencil8': gl.DEPTH_STENCIL,\n        depth32float: gl.DEPTH_COMPONENT,\n        'depth32float-stencil8': gl.DEPTH_STENCIL,\n\n    };\n}\n","import { extensions, ExtensionType } from '../../../extensions/Extensions';\nimport { GlGraphicsAdaptor } from '../../../scene/graphics/gl/GlGraphicsAdaptor';\nimport { GlMeshAdaptor } from '../../../scene/mesh/gl/GlMeshAdaptor';\nimport { GlBatchAdaptor } from '../../batcher/gl/GlBatchAdaptor';\nimport { AbstractRenderer } from '../shared/system/AbstractRenderer';\nimport { SharedRenderPipes, SharedSystems } from '../shared/system/SharedSystems';\nimport { RendererType } from '../types';\nimport { GlBufferSystem } from './buffer/GlBufferSystem';\nimport { GlContextSystem } from './context/GlContextSystem';\nimport { GlGeometrySystem } from './geometry/GlGeometrySystem';\nimport { GlBackBufferSystem } from './GlBackBufferSystem';\nimport { GlColorMaskSystem } from './GlColorMaskSystem';\nimport { GlEncoderSystem } from './GlEncoderSystem';\nimport { GlLimitsSystem } from './GlLimitsSystem';\nimport { GlStencilSystem } from './GlStencilSystem';\nimport { GlUboSystem } from './GlUboSystem';\nimport { GlRenderTargetSystem } from './renderTarget/GlRenderTargetSystem';\nimport { GlShaderSystem } from './shader/GlShaderSystem';\nimport { GlUniformGroupSystem } from './shader/GlUniformGroupSystem';\nimport { GlStateSystem } from './state/GlStateSystem';\nimport { GlTextureSystem } from './texture/GlTextureSystem';\n\nimport type { ICanvas } from '../../../environment/canvas/ICanvas';\nimport type { PipeConstructor } from '../shared/instructions/RenderPipe';\nimport type { SharedRendererOptions } from '../shared/system/SharedSystems';\nimport type { SystemConstructor } from '../shared/system/System';\nimport type { ExtractRendererOptions, ExtractSystemTypes } from '../shared/system/utils/typeUtils';\nimport type { GlRenderingContext } from './context/GlRenderingContext';\n\nconst DefaultWebGLSystems = [\n    ...SharedSystems,\n    GlUboSystem,\n    GlBackBufferSystem,\n    GlContextSystem,\n    GlLimitsSystem,\n    GlBufferSystem,\n    GlTextureSystem,\n    GlRenderTargetSystem,\n    GlGeometrySystem,\n    GlUniformGroupSystem,\n    GlShaderSystem,\n    GlEncoderSystem,\n    GlStateSystem,\n    GlStencilSystem,\n    GlColorMaskSystem,\n];\nconst DefaultWebGLPipes = [...SharedRenderPipes];\nconst DefaultWebGLAdapters = [GlBatchAdaptor, GlMeshAdaptor, GlGraphicsAdaptor];\n\n// installed systems will bbe added to this array by the extensions manager..\nconst systems: { name: string; value: SystemConstructor }[] = [];\nconst renderPipes: { name: string; value: PipeConstructor }[] = [];\nconst renderPipeAdaptors: { name: string; value: any }[] = [];\n\nextensions.handleByNamedList(ExtensionType.WebGLSystem, systems);\nextensions.handleByNamedList(ExtensionType.WebGLPipes, renderPipes);\nextensions.handleByNamedList(ExtensionType.WebGLPipesAdaptor, renderPipeAdaptors);\n\n// add all the default systems as well as any user defined ones from the extensions\nextensions.add(...DefaultWebGLSystems, ...DefaultWebGLPipes, ...DefaultWebGLAdapters);\n\n/**\n * The default WebGL renderer, uses WebGL2 contexts.\n * @category rendering\n * @standard\n * @interface\n */\nexport type WebGLSystems = ExtractSystemTypes<typeof DefaultWebGLSystems>\n& PixiMixins.RendererSystems & PixiMixins.WebGLSystems;\n\n/**\n * The default WebGL renderer, uses WebGL2 contexts.\n * @internal\n */\nexport type WebGLPipes = ExtractSystemTypes<typeof DefaultWebGLPipes> & PixiMixins.RendererPipes & PixiMixins.WebGLPipes;\n\n/**\n * Options for WebGLRenderer.\n * @category rendering\n * @standard\n */\nexport interface WebGLOptions\n    extends\n    SharedRendererOptions,\n    ExtractRendererOptions<typeof DefaultWebGLSystems>,\n    PixiMixins.WebGLOptions {}\n\n// eslint-disable-next-line requireExport/require-export-jsdoc, requireMemberAPI/require-member-api-doc\nexport interface WebGLRenderer<T extends ICanvas = HTMLCanvasElement>\n    extends AbstractRenderer<WebGLPipes, WebGLOptions, T>,\n    WebGLSystems {}\n\n/* eslint-disable max-len */\n/**\n * The WebGL PixiJS Renderer. This renderer allows you to use the most common graphics API, WebGL (and WebGL2).\n *\n * ```ts\n * // Create a new renderer\n * const renderer = new WebGLRenderer();\n * await renderer.init();\n *\n * // Add the renderer to the stage\n * document.body.appendChild(renderer.canvas);\n *\n * // Create a new stage\n * const stage = new Container();\n *\n * // Render the stage\n * renderer.render(stage);\n * ```\n *\n * You can use {@link autoDetectRenderer} to create a renderer that will automatically detect the best\n * renderer for the environment.\n *\n *\n * ```ts\n * // Create a new renderer\n * const renderer = await rendering.autoDetectRenderer({\n *    preference:'webgl',\n * });\n * ```\n *\n * The renderer is composed of systems that manage specific tasks. The following systems are added by default\n * whenever you create a WebGL renderer:\n *\n * | WebGL Core Systems                          | Systems that are specific to the WebGL renderer                               |\n * | ------------------------------------------- | ----------------------------------------------------------------------------- |\n * | {@link GlUboSystem}               | This manages WebGL2 uniform buffer objects feature for shaders                |\n * | {@link GlBackBufferSystem}        | manages the back buffer, used so that we can pixi can pixels from the screen  |\n * | {@link GlContextSystem}           | This manages the WebGL context and its extensions                             |\n * | {@link GlBufferSystem}            | This manages buffers and their GPU resources, keeps everything in sync        |\n * | {@link GlTextureSystem}           | This manages textures and their GPU resources, keeps everything in sync       |\n * | {@link GlRenderTargetSystem}      | This manages what we render too. For example the screen, or another texture   |\n * | {@link GlGeometrySystem}          | This manages geometry, used for drawing meshes via the GPU                    |\n * | {@link GlUniformGroupSystem}      | This manages uniform groups. Syncing shader properties with the GPU           |\n * | {@link GlShaderSystem}            | This manages shaders, programs that run on the GPU to output lovely pixels    |\n * | {@link GlEncoderSystem}           | This manages encoders, a WebGPU Paradigm, use it to draw a mesh + shader      |\n * | {@link GlStateSystem}             | This manages the state of the WebGL context. eg the various flags that can be set blend modes / depthTesting etc |\n * | {@link GlStencilSystem}           | This manages the stencil buffer. Used primarily for masking                   |\n * | {@link GlColorMaskSystem}         | This manages the color mask. Used for color masking                           |\n *\n * The breadth of the API surface provided by the renderer is contained within these systems.\n * @category rendering\n * @property {GlUboSystem} ubo - UboSystem instance.\n * @property {GlBackBufferSystem} backBuffer - BackBufferSystem instance.\n * @property {GlContextSystem} context - ContextSystem instance.\n * @property {GlBufferSystem} buffer - BufferSystem instance.\n * @property {GlTextureSystem} texture - TextureSystem instance.\n * @property {GlRenderTargetSystem} renderTarget - RenderTargetSystem instance.\n * @property {GlGeometrySystem} geometry - GeometrySystem instance.\n * @property {GlUniformGroupSystem} uniformGroup - UniformGroupSystem instance.\n * @property {GlShaderSystem} shader - ShaderSystem instance.\n * @property {GlEncoderSystem} encoder - EncoderSystem instance.\n * @property {GlStateSystem} state - StateSystem instance.\n * @property {GlStencilSystem} stencil - StencilSystem instance.\n * @property {GlColorMaskSystem} colorMask - ColorMaskSystem instance.\n * @extends AbstractRenderer\n * @standard\n */\nexport class WebGLRenderer<T extends ICanvas = HTMLCanvasElement>\n    extends AbstractRenderer<WebGLPipes, WebGLOptions, T>\n    implements WebGLSystems\n{\n    public gl: GlRenderingContext;\n\n    constructor()\n    {\n        const systemConfig = {\n            name: 'webgl',\n            type: RendererType.WEBGL,\n            systems,\n            renderPipes,\n            renderPipeAdaptors,\n        };\n\n        super(systemConfig);\n    }\n}\n"],"names":["GlGraphicsAdaptor","contextChange","renderer","uniforms","UniformGroup","uColor","value","Float32Array","type","uTransformMatrix","Matrix","uRound","maxTextures","limits","maxBatchableTextures","glProgram","compileHighShaderGlProgram","name","bits","colorBitGl","generateTextureBatchBitGl","localUniformBitGl","roundPixelsBitGl","shader","Shader","resources","localUniforms","batchSamplers","getBatchSamplersUniformGroup","execute","graphicsPipe","renderable","context","customShader","this","contextSystem","graphicsContext","batcher","instructions","getContextRenderData","groups","globalUniforms","bindGroup","state","set","bind","geometry","batches","i","instructionSize","batch","size","j","textures","count","texture","draw","topology","start","destroy","extension","ExtensionType","WebGLPipesAdaptor","GlMeshAdaptor","init","textureBitGl","_shader","uTexture","Texture","EMPTY","source","textureUniforms","uTextureMatrix","meshPipe","mesh","warn","uSampler","style","textureMatrix","mapCoord","localUniformsBindGroup","encoder","_geometry","GlBatchAdaptor","constructor","_tempState","State","for2d","_didUploadHash","batcherPipe","runners","add","batchPipe","didUpload","uid","updateUniformGroup","uniformGroup","blendMode","BUFFER_TYPE","BUFFER_TYPE2","GlBuffer","buffer","_lastBindBaseLocation","_lastBindCallId","updateID","byteLength","GlBufferSystem","_gpuBuffers","Object","create","_boundBufferBases","_minBaseLocation","_nextBindBaseIndex","_bindCallId","_renderer","renderableGC","addManagedHash","_gl","gl","_maxBindings","maxUniformBindings","getGlBuffer","createGLBuffer","glBuffer","bindBuffer","bindBufferBase","index","UNIFORM_BUFFER","nextBindBase","hasTransformFeedback","freeLocationForBufferBase","freeIndex","getLastBindBaseLocation","loop","nextIndex","curBuf","bindBufferRange","offset","updateBuffer","_updateID","data","drawType","descriptor","usage","BufferUsage","STATIC","STATIC_DRAW","DYNAMIC_DRAW","bufferSubData","_updateSize","BYTES_PER_ELEMENT","bufferData","destroyAll","id","deleteBuffer","onBufferDestroy","contextLost","ARRAY_BUFFER","INDEX","ELEMENT_ARRAY_BUFFER","UNIFORM","createBuffer","on","resetState","WebGLSystem","_GlContextSystem","supports","uint32Indices","uniformBufferObject","vertexArrayObject","srgbTextures","nonPowOf2wrapping","msaa","nonPowOf2mipmaps","extensions","handleContextLost","handleContextRestored","isLost","isContextLost","options","defaultOptions","multiView","canvas","DOMAdapter","get","createCanvas","width","height","view","initFromContext","alpha","background","premultipliedAlpha","antialias","backBuffer","useBackBuffer","createContext","preferWebGLVersion","stencil","preserveDrawingBuffer","powerPreference","ensureCanvasSize","targetCanvas","Math","max","webGLVersion","getWebGLRenderingContext","getExtensions","validateContext","emit","element","addEventListener","getContext","Error","common","anisotropicFiltering","getExtension","floatTextureLinear","s3tc","s3tc_sRGB","etc","etc1","pvrtc","atc","astc","bptc","rgtc","loseContext","drawBuffers","depthTexture","uint32ElementIndex","floatTexture","textureHalfFloat","textureHalfFloatLinear","vertexAttribDivisorANGLE","srgb","colorBufferFloat","provokeExt","provokingVertexWEBGL","FIRST_VERTEX_CONVENTION_WEBGL","event","preventDefault","_contextLossForced","setTimeout","restoreContext","removeEventListener","useProgram","forceContextLoss","attributes","getContextAttributes","isWebGl2","GlContextSystem","GL_FORMATS","GL_FORMATS2","GL_TARGETS","GL_TARGETS2","GL_TYPES","GL_TYPES2","infoMap","uint8x2","UNSIGNED_BYTE","uint8x4","sint8x2","BYTE","sint8x4","unorm8x2","unorm8x4","snorm8x2","snorm8x4","uint16x2","UNSIGNED_SHORT","uint16x4","sint16x2","SHORT","sint16x4","unorm16x2","unorm16x4","snorm16x2","snorm16x4","float16x2","HALF_FLOAT","float16x4","float32","FLOAT","float32x2","float32x3","float32x4","uint32","UNSIGNED_INT","uint32x2","uint32x3","uint32x4","sint32","INT","sint32x2","sint32x3","sint32x4","getGlTypeFromFormat","format","topologyToGlMap","GlGeometrySystem","_geometryVaoHash","_activeGeometry","_activeVao","hasVao","hasInstance","nativeVaoExtension","createVertexArray","createVertexArrayOES","bindVertexArray","vao","bindVertexArrayOES","deleteVertexArray","deleteVertexArrayOES","nativeInstancedExtension","drawArraysInstanced","a","b","c","d","drawArraysInstancedANGLE","drawElementsInstanced","e","drawElementsInstancedANGLE","vertexAttribDivisor","program","getVao","updateBuffers","unbind","bufferSystem","buffers","length","checkCompatibility","geometryAttributes","shaderAttributes","_attributeData","getSignature","attribs","strings","push","location","join","_key","initGeometryVao","_getProgramData","signature","onGeometryDestroy","vaoObjectHash","ensureAttributes","activateVao","arguments","undefined","indexBuffer","lastBuffer","attribute","programAttrib","enableVertexAttribArray","attributeInfo","getAttributeInfoFromFormat","substring","vertexAttribIPointer","stride","vertexAttribPointer","normalised","instance","divisor","instanceCount","glTopology","byteSize","glType","drawElements","getSize","drawArrays","bigTriangleGeometry","Geometry","aPosition","_GlBackBufferSystem","_useBackBufferThisRender","_antialias","_state","bigTriangleProgram","GlProgram","vertex","fragment","_bigTriangleShader","WHITE","renderStart","renderTarget","getRenderTarget","target","isRoot","renderTarget2","_targetTexture","colorTexture","_getBackBufferTexture","renderEnd","_presentBackBuffer","finishRenderPass","_backBufferTexture","targetSourceTexture","TextureSource","resolution","_resolution","resize","priority","GlBackBufferSystem","GlColorMaskSystem","_colorMaskCache","setMask","colorMask","GlEncoderSystem","commandFinished","Promise","resolve","setGeometry","skipSync","_activeProgram","GlLimitsSystem","getParameter","MAX_TEXTURE_IMAGE_UNITS","checkMaxIfStatementsInShader","MAX_UNIFORM_BUFFER_BINDINGS","GlStencilSystem","_stencilCache","enabled","stencilReference","stencilMode","STENCIL_MODES","NONE","_renderTargetStencilState","onRenderTargetChange","_comparisonFuncMapping","always","ALWAYS","never","NEVER","equal","EQUAL","NOTEQUAL","less","LESS","LEQUAL","greater","GREATER","GEQUAL","_stencilOpsMapping","keep","KEEP","zero","ZERO","replace","REPLACE","invert","INVERT","INCR","DECR","INCR_WRAP","DECR_WRAP","_activeRenderTarget","stencilState","DISABLED","setStencilMode","mode","GpuStencilModesToPixi","enable","STENCIL_TEST","stencilFunc","stencilBack","compare","stencilOp","passOp","disable","WGSL_TO_STD40_SIZE","f32","i32","createUboElementsSTD40","uniformData","uboElements","map","uboElement","boundary","curOffset","ceil","generateArraySyncSTD40","offsetToAdd","rowSize","elementSize","remainder","indexOf","createUboSyncFunctionSTD40","createUboSyncFunction","uboSyncFunctionsSTD40","GlUboSystem","UboSystem","createUboElements","generateUboSync","GlRenderTarget","msaaRenderBuffer","GlRenderTargetAdaptor","_clearColorCache","_viewPortCache","Rectangle","renderTargetSystem","_renderTargetSystem","copyToTexture","sourceRenderSurfaceTexture","destinationTexture","originSrc","originDest","glRenderTarget","getGpuRenderTarget","bindFramebuffer","FRAMEBUFFER","resolveTargetFramebuffer","copyTexSubImage2D","TEXTURE_2D","x","y","startRenderPass","clear","clearColor","viewport","gpuRenderTarget","viewPortY","pixelHeight","colorTextures","forEach","framebuffer","viewPortCache","depthStencilRenderBuffer","depth","_initStencil","READ_FRAMEBUFFER","blitFramebuffer","COLOR_BUFFER_BIT","NEAREST","initGpuRenderTarget","CanvasSource","resource","_initColor","destroyGpuRenderTarget","deleteFramebuffer","deleteRenderbuffer","renderBuffer","_renderTarget","CLEAR","ALL","COLOR","defaultClearColor","clearColorCache","clearColorArray","resizeGpuRenderTarget","_resizeColor","_resizeStencil","createFramebuffer","pixelWidth","bindSource","glTexture","getGlSource","framebufferTexture2D","COLOR_ATTACHMENT0","viewFramebuffer","_","createRenderbuffer","source2","glInternalFormat","internalFormat","bindRenderbuffer","RENDERBUFFER","renderbufferStorageMultisample","framebufferRenderbuffer","DEPTH_STENCIL_ATTACHMENT","DEPTH24_STENCIL8","renderbufferStorage","DEPTH_STENCIL","prerender","test","postrender","contextCanvas","canvasSource","context2D","drawImage","GlRenderTargetSystem","RenderTargetSystem","super","adaptor","GlProgramData","uniformGroups","uniformDirtyGroups","uniformBlockBindings","compileShader","src","createShader","shaderSource","booleanArray","array","Array","defaultValue","Int32Array","Uint32Array","GL_TABLE","GL_TO_GLSL_TYPES","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","INT_VEC2","INT_VEC3","INT_VEC4","UNSIGNED_INT_VEC2","UNSIGNED_INT_VEC3","UNSIGNED_INT_VEC4","BOOL","BOOL_VEC2","BOOL_VEC3","BOOL_VEC4","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","SAMPLER_2D","INT_SAMPLER_2D","UNSIGNED_INT_SAMPLER_2D","SAMPLER_CUBE","INT_SAMPLER_CUBE","UNSIGNED_INT_SAMPLER_CUBE","SAMPLER_2D_ARRAY","INT_SAMPLER_2D_ARRAY","UNSIGNED_INT_SAMPLER_2D_ARRAY","GLSL_TO_VERTEX_TYPES","float","vec2","vec3","vec4","int","ivec2","ivec3","ivec4","uint","uvec2","uvec3","uvec4","bool","bvec2","bvec3","bvec4","mapType","typeNames","keys","tn","mapGlToVertexFormat","typeValue","logPrettyShaderError","shaderSrc","getShaderSource","split","line","shaderLog","getShaderInfoLog","splitShader","dedupe","lineNumbers","parseFloat","filter","n","logArgs","number","fragmentSourceToLog","console","error","groupCollapsed","groupEnd","generateProgram","glVertShader","VERTEX_SHADER","glFragShader","FRAGMENT_SHADER","webGLProgram","createProgram","attachShader","transformFeedbackVaryings","names","bufferMode","SEPARATE_ATTRIBS","INTERLEAVED_ATTRIBS","linkProgram","getProgramParameter","LINK_STATUS","vertexShader","fragmentShader","getShaderParameter","COMPILE_STATUS","getProgramInfoLog","logProgramError","sortAttributes","totalAttributes","ACTIVE_ATTRIBUTES","attribData","getActiveAttrib","startsWith","sort","bindAttribLocation","getAttribLocation","extractAttributesFromGlProgram","_uniformData","totalUniforms","ACTIVE_UNIFORMS","getActiveUniform","isArray","match","getUniformData","_uniformBlockData","ACTIVE_UNIFORM_BLOCKS","uniformBlocks","totalUniformsBlocks","getActiveUniformBlockName","uniformBlockIndex","getUniformBlockIndex","getActiveUniformBlockParameter","UNIFORM_BLOCK_DATA_SIZE","getUboData","deleteShader","getUniformLocation","defaultSyncData","textureCount","blockIndex","GlShaderSystem","_programDataHash","_shaderSyncFunctions","_setProgram","syncFunction","_generateShaderSync","bindUniformBlock","programData","isBufferResource","_bufferResource","ubo","boundLocation","uniformBlockBinding","_createProgramData","key","shaderSystem","funcFragments","headerFragments","addedTextreSystem","group","resName","_uniformBindMap","Number","BufferResource","uniformName","uniform1i","functionSource","Function","generateShaderSyncCode","UNIFORM_TO_SINGLE_SETTERS","u32","UNIFORM_TO_ARRAY_SETTERS","GlUniformGroupSystem","_cache","_uniformGroupSyncHash","syncData","isStatic","_dirtyId","_getUniformSyncFunction","syncFunc","_signature","_createUniformSyncFunction","uniformGroupSyncHash","_getSignature","_generateUniformsSync","uniform","uniformStructures","parsed","uniformParsers","parser","template","generateUniformsSync","preFix","_GlStateSystem","_invertFrontFace","stateId","polygonOffset","_blendEq","setBlend","setOffset","setCullFace","setDepthTest","setFrontFace","setDepthMask","checks","defaultState","_cullFace","_frontFace","_frontFaceDirty","blendModesMap","blendMap","normal","ONE","ONE_MINUS_SRC_ALPHA","multiply","DST_COLOR","screen","ONE_MINUS_SRC_COLOR","none","SRC_ALPHA","erase","ext","min","MIN_EXT","MAX_EXT","MIN","MAX","mapWebGLBlendModesToPixi","diff","call","forceState","_updateCheck","_checkBlendMode","BLEND","_checkPolygonOffset","POLYGON_OFFSET_FILL","DEPTH_TEST","depthMask","CULL_FACE","faceMode","_glFrontFace","frontFace","setBlendMode","blendFunc","blendFuncSeparate","blendEquationSeparate","FUNC_ADD","setPolygonOffset","scale","CCW","pixelStorei","UNPACK_FLIP_Y_WEBGL","func","splice","system","GlStateSystem","GlTexture","RGBA","samplerType","glUploadBufferImageResource","upload","texSubImage2D","texImage2D","compressedFormatMap","glUploadCompressedTextureResource","UNPACK_ALIGNMENT","mipWidth","mipHeight","compressed","levelBuffer","compressedTexImage2D","glUploadImageResource","glWidth","glHeight","textureWidth","textureHeight","resourceWidth","resourceHeight","glUploadVideoResource","isValid","scaleModeToGlFilter","linear","nearest","mipmapScaleModeToGlFilter","wrapModeToGlAddress","repeat","compareModeToGlCompare","applyStyleParams","mipmaps","anisotropicExt","glFunctionName","firstParam","forceClamp","firstCreation","castParam","addressModeU","addressModeV","addressModeW","wrapModeS","wrapModeT","wrapModeR","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_WRAP_R","magFilter","TEXTURE_MAG_FILTER","mipmapFilter","glFilterMode","minFilter","TEXTURE_MIN_FILTER","maxAnisotropy","level","MAX_TEXTURE_MAX_ANISOTROPY_EXT","TEXTURE_MAX_ANISOTROPY_EXT","TEXTURE_COMPARE_FUNC","GlTextureSystem","managedTextures","_glTextures","_glSamplers","_boundTextures","_activeTextureLocation","_boundSamplers","_uploads","image","video","_premultiplyAlpha","_useSeparateSamplers","_mapFormatToInternalFormat","bgra8unorm","SRGB8_ALPHA8_EXT","SRGB8_ALPHA8","RGBA8","r8unorm","R8","r8snorm","R8_SNORM","r8uint","R8UI","r8sint","R8I","r16uint","R16UI","r16sint","R16I","r16float","R16F","rg8unorm","RG8","rg8snorm","RG8_SNORM","rg8uint","RG8UI","rg8sint","RG8I","r32uint","R32UI","r32sint","R32I","r32float","R32F","rg16uint","RG16UI","rg16sint","RG16I","rg16float","RG16F","rgba8unorm","rgba8snorm","RGBA8_SNORM","rgba8uint","RGBA8UI","rgba8sint","RGBA8I","rgb9e5ufloat","RGB9_E5","rgb10a2unorm","RGB10_A2","rg11b10ufloat","R11F_G11F_B10F","rg32uint","RG32UI","rg32sint","RG32I","rg32float","RG32F","rgba16uint","RGBA16UI","rgba16sint","RGBA16I","rgba16float","RGBA16F","rgba32uint","RGBA32UI","rgba32sint","RGBA32I","rgba32float","RGBA32F","stencil8","STENCIL_INDEX8","depth16unorm","DEPTH_COMPONENT16","depth24plus","DEPTH_COMPONENT24","depth32float","DEPTH_COMPONENT32F","DEPTH32F_STENCIL8","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT","COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT","COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT","COMPRESSED_RED_RGTC1_EXT","COMPRESSED_SIGNED_RED_RGTC1_EXT","COMPRESSED_RED_GREEN_RGTC2_EXT","COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT","COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT","COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT","COMPRESSED_RGBA_BPTC_UNORM_EXT","COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT","COMPRESSED_RGB8_ETC2","COMPRESSED_SRGB8_ETC2","COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2","COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2","COMPRESSED_RGBA8_ETC2_EAC","COMPRESSED_SRGB8_ALPHA8_ETC2_EAC","COMPRESSED_R11_EAC","COMPRESSED_SIGNED_RG11_EAC","COMPRESSED_RGBA_ASTC_4x4_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR","COMPRESSED_RGBA_ASTC_5x4_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR","COMPRESSED_RGBA_ASTC_5x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR","COMPRESSED_RGBA_ASTC_6x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR","COMPRESSED_RGBA_ASTC_6x6_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR","COMPRESSED_RGBA_ASTC_8x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR","COMPRESSED_RGBA_ASTC_8x6_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR","COMPRESSED_RGBA_ASTC_8x8_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR","COMPRESSED_RGBA_ASTC_10x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR","COMPRESSED_RGBA_ASTC_10x6_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR","COMPRESSED_RGBA_ASTC_10x8_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR","COMPRESSED_RGBA_ASTC_10x10_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR","COMPRESSED_RGBA_ASTC_12x10_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR","COMPRESSED_RGBA_ASTC_12x12_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR","mapFormatToGlInternalFormat","_mapFormatToType","UNSIGNED_INT_5_9_9_9_REV","UNSIGNED_INT_2_10_10_10_REV","UNSIGNED_INT_10F_11F_11F_REV","UNSIGNED_INT_24_8","FLOAT_32_UNSIGNED_INT_24_8_REV","mapFormatToGlType","_mapFormatToFormat","RED","RG","RGB","DEPTH_COMPONENT","mapFormatToGlFormat","initSource","_bindSampler","_touched","textureGC","_activateLocation","bindTexture","bindSampler","sampler","_getGlSampler","boundTextures","activeTexture","TEXTURE0","_initSource","createTexture","autoGenerateMipmaps","isPowerOfTwo","biggestDimension","mipLevelCount","floor","log2","includes","onSourceUpdate","onStyleChange","onSourceDestroy","onSourceUnload","onUpdateMipmaps","updateStyle","deleteTexture","alphaMode","UNPACK_PREMULTIPLY_ALPHA_WEBGL","uploadMethodId","generateMipmap","off","_initSampler","glSampler","createSampler","_resourceId","generateCanvas","pixels","getPixels","ctx","imageData","createImageData","putImageData","frame","round","Uint8Array","glRenterTarget","readPixels","Uint8ClampedArray","slice","fill","DefaultWebGLSystems","SharedSystems","DefaultWebGLPipes","SharedRenderPipes","DefaultWebGLAdapters","systems","renderPipes","renderPipeAdaptors","handleByNamedList","WebGLPipes","WebGLRenderer","AbstractRenderer","RendererType","WEBGL"],"sourceRoot":""}